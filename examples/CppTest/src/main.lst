   1              		.file	"main.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 53696768 		.string	"Sighup\n"
   6      75700A00 
   7              		.section	.text.unlikely,"ax",@progbits
   8              	.LCOLDB1:
   9              		.text
  10              	.LHOTB1:
  11              		.p2align 4,,15
  12              		.section	.text.unlikely
  13              	.Ltext_cold0:
  14              		.text
  15              		.globl	_Z6sigHupi
  17              	_Z6sigHupi:
  18              	.LFB1352:
  19              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** /**
   2:src/main.cpp  ****  *---------------------------------------------------------------------------
   3:src/main.cpp  ****  * @brief   Makeplates main example file.
   4:src/main.cpp  ****  *
   5:src/main.cpp  ****  * @file    main.cpp
   6:src/main.cpp  ****  * @author  Peter Malmberg <peter.malmberg@gmail.com>
   7:src/main.cpp  ****  * @date    2016-10-24
   8:src/main.cpp  ****  * @license GPLv2
   9:src/main.cpp  ****  *
  10:src/main.cpp  ****  *---------------------------------------------------------------------------
  11:src/main.cpp  ****  */
  12:src/main.cpp  **** 
  13:src/main.cpp  **** // Includes ---------------------------------------------------------------
  14:src/main.cpp  **** 
  15:src/main.cpp  **** 
  16:src/main.cpp  **** #include <stdio.h>
  17:src/main.cpp  **** #include <stdlib.h>
  18:src/main.cpp  **** #include <sys/types.h>
  19:src/main.cpp  **** #include <unistd.h>
  20:src/main.cpp  **** #include <signal.h>
  21:src/main.cpp  **** #include <string.h>
  22:src/main.cpp  **** #include <errno.h>
  23:src/main.cpp  **** #include <vector>
  24:src/main.cpp  **** #include <array>
  25:src/main.cpp  **** #include <string>
  26:src/main.cpp  **** 
  27:src/main.cpp  **** #include "MyClass.h"
  28:src/main.cpp  **** 
  29:src/main.cpp  **** #include "def.h"
  30:src/main.cpp  **** 
  31:src/main.cpp  **** using namespace std;
  32:src/main.cpp  **** 
  33:src/main.cpp  **** // Defines ----------------------------------------------------------------
  34:src/main.cpp  **** 
  35:src/main.cpp  **** #define PROGNAME "makeplate"
  36:src/main.cpp  **** 
  37:src/main.cpp  **** // Variables --------------------------------------------------------------
  38:src/main.cpp  **** 
  39:src/main.cpp  **** // Prototypes -------------------------------------------------------------
  40:src/main.cpp  **** void sigInt(int sig);
  41:src/main.cpp  **** void sigHup(int sig);
  42:src/main.cpp  **** 
  43:src/main.cpp  **** // Code -------------------------------------------------------------------
  44:src/main.cpp  **** 
  45:src/main.cpp  **** class Kalle {
  46:src/main.cpp  ****   private:
  47:src/main.cpp  ****     int a;
  48:src/main.cpp  **** 
  49:src/main.cpp  ****   public:
  50:src/main.cpp  ****     Kalle() {
  51:src/main.cpp  ****         a = 1;
  52:src/main.cpp  ****     }
  53:src/main.cpp  **** 
  54:src/main.cpp  ****     void Do(void) {
  55:src/main.cpp  ****         printf("Do %d\n", a);
  56:src/main.cpp  ****     }
  57:src/main.cpp  **** };
  58:src/main.cpp  **** 
  59:src/main.cpp  **** 
  60:src/main.cpp  **** void sigInt(int sig) {
  61:src/main.cpp  ****     UNUSED(sig);
  62:src/main.cpp  **** 
  63:src/main.cpp  ****     printf("\nExiting program\n");
  64:src/main.cpp  ****     exit(0);
  65:src/main.cpp  **** }
  66:src/main.cpp  **** 
  67:src/main.cpp  **** void sigHup(int sig) {
  20              		.loc 1 67 0
  21              		.cfi_startproc
  22              	.LVL0:
  23              	.LBB448:
  24              	.LBB449:
  25              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2016 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  26              		.loc 2 104 0
  27 0000 BE000000 		movl	$.LC0, %esi
  27      00
  28 0005 BF010000 		movl	$1, %edi
  28      00
  29              	.LVL1:
  30 000a 31C0     		xorl	%eax, %eax
  31 000c E9000000 		jmp	__printf_chk
  31      00
  32              	.LVL2:
  33              	.LBE449:
  34              	.LBE448:
  35              		.cfi_endproc
  36              	.LFE1352:
  38              		.section	.text.unlikely
  39              	.LCOLDE1:
  40              		.text
  41              	.LHOTE1:
  42              		.section	.rodata.str1.1
  43              	.LC2:
  44 0008 0A457869 		.string	"\nExiting program\n"
  44      74696E67 
  44      2070726F 
  44      6772616D 
  44      0A00
  45              		.section	.text.unlikely
  46              	.LCOLDB3:
  47              		.text
  48              	.LHOTB3:
  49 0011 0F1F4400 		.p2align 4,,15
  49      00662E0F 
  49      1F840000 
  49      000000
  50              		.globl	_Z6sigInti
  52              	_Z6sigInti:
  53              	.LFB1351:
  60:src/main.cpp  ****     UNUSED(sig);
  54              		.loc 1 60 0
  55              		.cfi_startproc
  56              	.LVL3:
  57              	.LBB450:
  58              	.LBB451:
  59              		.loc 2 104 0
  60 0020 BF010000 		movl	$1, %edi
  60      00
  61              	.LVL4:
  62              	.LBE451:
  63              	.LBE450:
  60:src/main.cpp  ****     UNUSED(sig);
  64              		.loc 1 60 0
  65 0025 4883EC08 		subq	$8, %rsp
  66              		.cfi_def_cfa_offset 16
  67              	.LBB453:
  68              	.LBB452:
  69              		.loc 2 104 0
  70 0029 BE000000 		movl	$.LC2, %esi
  70      00
  71 002e 31C0     		xorl	%eax, %eax
  72 0030 E8000000 		call	__printf_chk
  72      00
  73              	.LVL5:
  74              	.LBE452:
  75              	.LBE453:
  64:src/main.cpp  **** }
  76              		.loc 1 64 0
  77 0035 31FF     		xorl	%edi, %edi
  78 0037 E8000000 		call	exit
  78      00
  79              	.LVL6:
  80              		.cfi_endproc
  81              	.LFE1351:
  83              		.section	.text.unlikely
  84              	.LCOLDE3:
  85              		.text
  86              	.LHOTE3:
  87              		.section	.text.unlikely._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,"axG",
  88              		.align 2
  89              	.LCOLDB4:
  90              		.section	.text._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,"axG",@progbits
  91              	.LHOTB4:
  92              		.align 2
  93              		.p2align 4,,15
  94              		.weak	_ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_
  96              	_ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_:
  97              	.LFB1476:
  98              		.file 3 "/usr/include/c++/5/bits/vector.tcc"
   1:/usr/include/c++/5/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/5/bits/vector.tcc **** 
   3:/usr/include/c++/5/bits/vector.tcc **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/vector.tcc **** //
   5:/usr/include/c++/5/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/5/bits/vector.tcc **** 
  11:/usr/include/c++/5/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/vector.tcc **** 
  16:/usr/include/c++/5/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/vector.tcc **** 
  20:/usr/include/c++/5/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/vector.tcc **** 
  25:/usr/include/c++/5/bits/vector.tcc **** /*
  26:/usr/include/c++/5/bits/vector.tcc ****  *
  27:/usr/include/c++/5/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/vector.tcc ****  *
  30:/usr/include/c++/5/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/vector.tcc ****  *
  38:/usr/include/c++/5/bits/vector.tcc ****  *
  39:/usr/include/c++/5/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/5/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/vector.tcc ****  *
  42:/usr/include/c++/5/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/vector.tcc ****  */
  50:/usr/include/c++/5/bits/vector.tcc **** 
  51:/usr/include/c++/5/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/5/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/vector.tcc ****  */
  55:/usr/include/c++/5/bits/vector.tcc **** 
  56:/usr/include/c++/5/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/5/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/5/bits/vector.tcc **** 
  59:/usr/include/c++/5/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/5/bits/vector.tcc **** {
  61:/usr/include/c++/5/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/5/bits/vector.tcc **** 
  63:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/5/bits/vector.tcc ****     void
  65:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/5/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/5/bits/vector.tcc ****     {
  68:/usr/include/c++/5/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/5/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/5/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/5/bits/vector.tcc **** 	{
  72:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/5/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/5/bits/vector.tcc **** 			_M_get_Tp_allocator());
  78:/usr/include/c++/5/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/5/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/5/bits/vector.tcc **** 	}
  85:/usr/include/c++/5/bits/vector.tcc ****     }
  86:/usr/include/c++/5/bits/vector.tcc **** 
  87:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/5/bits/vector.tcc ****       void
  91:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  92:/usr/include/c++/5/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  93:/usr/include/c++/5/bits/vector.tcc ****       {
  94:/usr/include/c++/5/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:/usr/include/c++/5/bits/vector.tcc **** 	  {
  96:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:/usr/include/c++/5/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:/usr/include/c++/5/bits/vector.tcc **** 	  }
 100:/usr/include/c++/5/bits/vector.tcc **** 	else
 101:/usr/include/c++/5/bits/vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:/usr/include/c++/5/bits/vector.tcc ****       }
 103:/usr/include/c++/5/bits/vector.tcc **** #endif
 104:/usr/include/c++/5/bits/vector.tcc **** 
 105:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 108:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 109:/usr/include/c++/5/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 110:/usr/include/c++/5/bits/vector.tcc **** #else
 111:/usr/include/c++/5/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 112:/usr/include/c++/5/bits/vector.tcc **** #endif
 113:/usr/include/c++/5/bits/vector.tcc ****     {
 114:/usr/include/c++/5/bits/vector.tcc ****       const size_type __n = __position - begin();
 115:/usr/include/c++/5/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 116:/usr/include/c++/5/bits/vector.tcc **** 	  && __position == end())
 117:/usr/include/c++/5/bits/vector.tcc **** 	{
 118:/usr/include/c++/5/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 119:/usr/include/c++/5/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 120:/usr/include/c++/5/bits/vector.tcc **** 	}
 121:/usr/include/c++/5/bits/vector.tcc ****       else
 122:/usr/include/c++/5/bits/vector.tcc **** 	{
 123:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 124:/usr/include/c++/5/bits/vector.tcc **** 	  const auto __pos = begin() + (__position - cbegin());
 125:/usr/include/c++/5/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 126:/usr/include/c++/5/bits/vector.tcc **** 	    {
 127:/usr/include/c++/5/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 128:/usr/include/c++/5/bits/vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy));
 129:/usr/include/c++/5/bits/vector.tcc **** 	    }
 130:/usr/include/c++/5/bits/vector.tcc **** 	  else
 131:/usr/include/c++/5/bits/vector.tcc **** 	    _M_insert_aux(__pos, __x);
 132:/usr/include/c++/5/bits/vector.tcc **** #else
 133:/usr/include/c++/5/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 134:/usr/include/c++/5/bits/vector.tcc **** #endif
 135:/usr/include/c++/5/bits/vector.tcc **** 	}
 136:/usr/include/c++/5/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 137:/usr/include/c++/5/bits/vector.tcc ****     }
 138:/usr/include/c++/5/bits/vector.tcc **** 
 139:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 140:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 141:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 142:/usr/include/c++/5/bits/vector.tcc ****     _M_erase(iterator __position)
 143:/usr/include/c++/5/bits/vector.tcc ****     {
 144:/usr/include/c++/5/bits/vector.tcc ****       if (__position + 1 != end())
 145:/usr/include/c++/5/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 146:/usr/include/c++/5/bits/vector.tcc ****       --this->_M_impl._M_finish;
 147:/usr/include/c++/5/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 148:/usr/include/c++/5/bits/vector.tcc ****       return __position;
 149:/usr/include/c++/5/bits/vector.tcc ****     }
 150:/usr/include/c++/5/bits/vector.tcc **** 
 151:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 152:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 153:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 154:/usr/include/c++/5/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 155:/usr/include/c++/5/bits/vector.tcc ****     {
 156:/usr/include/c++/5/bits/vector.tcc ****       if (__first != __last)
 157:/usr/include/c++/5/bits/vector.tcc **** 	{
 158:/usr/include/c++/5/bits/vector.tcc **** 	  if (__last != end())
 159:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 160:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 161:/usr/include/c++/5/bits/vector.tcc **** 	}
 162:/usr/include/c++/5/bits/vector.tcc ****       return __first;
 163:/usr/include/c++/5/bits/vector.tcc ****     }
 164:/usr/include/c++/5/bits/vector.tcc **** 
 165:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 166:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 167:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 168:/usr/include/c++/5/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 169:/usr/include/c++/5/bits/vector.tcc ****     {
 170:/usr/include/c++/5/bits/vector.tcc ****       if (&__x != this)
 171:/usr/include/c++/5/bits/vector.tcc **** 	{
 172:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 173:/usr/include/c++/5/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 174:/usr/include/c++/5/bits/vector.tcc **** 	    {
 175:/usr/include/c++/5/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 176:/usr/include/c++/5/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 177:/usr/include/c++/5/bits/vector.tcc **** 	        {
 178:/usr/include/c++/5/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 179:/usr/include/c++/5/bits/vector.tcc **** 		  this->clear();
 180:/usr/include/c++/5/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 181:/usr/include/c++/5/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 182:/usr/include/c++/5/bits/vector.tcc **** 				- this->_M_impl._M_start);
 183:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 184:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 185:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 186:/usr/include/c++/5/bits/vector.tcc **** 		}
 187:/usr/include/c++/5/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 188:/usr/include/c++/5/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 189:/usr/include/c++/5/bits/vector.tcc **** 	    }
 190:/usr/include/c++/5/bits/vector.tcc **** #endif
 191:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 192:/usr/include/c++/5/bits/vector.tcc **** 	  if (__xlen > capacity())
 193:/usr/include/c++/5/bits/vector.tcc **** 	    {
 194:/usr/include/c++/5/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 195:/usr/include/c++/5/bits/vector.tcc **** 						   __x.end());
 196:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 197:/usr/include/c++/5/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 198:/usr/include/c++/5/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 199:/usr/include/c++/5/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 200:/usr/include/c++/5/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 201:/usr/include/c++/5/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 202:/usr/include/c++/5/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 203:/usr/include/c++/5/bits/vector.tcc **** 	    }
 204:/usr/include/c++/5/bits/vector.tcc **** 	  else if (size() >= __xlen)
 205:/usr/include/c++/5/bits/vector.tcc **** 	    {
 206:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 207:/usr/include/c++/5/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 208:/usr/include/c++/5/bits/vector.tcc **** 	    }
 209:/usr/include/c++/5/bits/vector.tcc **** 	  else
 210:/usr/include/c++/5/bits/vector.tcc **** 	    {
 211:/usr/include/c++/5/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 212:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_start);
 213:/usr/include/c++/5/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 214:/usr/include/c++/5/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 215:/usr/include/c++/5/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 216:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 217:/usr/include/c++/5/bits/vector.tcc **** 	    }
 218:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 219:/usr/include/c++/5/bits/vector.tcc **** 	}
 220:/usr/include/c++/5/bits/vector.tcc ****       return *this;
 221:/usr/include/c++/5/bits/vector.tcc ****     }
 222:/usr/include/c++/5/bits/vector.tcc **** 
 223:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 224:/usr/include/c++/5/bits/vector.tcc ****     void
 225:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 226:/usr/include/c++/5/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 227:/usr/include/c++/5/bits/vector.tcc ****     {
 228:/usr/include/c++/5/bits/vector.tcc ****       if (__n > capacity())
 229:/usr/include/c++/5/bits/vector.tcc **** 	{
 230:/usr/include/c++/5/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 231:/usr/include/c++/5/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 232:/usr/include/c++/5/bits/vector.tcc **** 	}
 233:/usr/include/c++/5/bits/vector.tcc ****       else if (__n > size())
 234:/usr/include/c++/5/bits/vector.tcc **** 	{
 235:/usr/include/c++/5/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 236:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 237:/usr/include/c++/5/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 238:/usr/include/c++/5/bits/vector.tcc **** 					  __n - size(), __val,
 239:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 240:/usr/include/c++/5/bits/vector.tcc **** 	}
 241:/usr/include/c++/5/bits/vector.tcc ****       else
 242:/usr/include/c++/5/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 243:/usr/include/c++/5/bits/vector.tcc ****     }
 244:/usr/include/c++/5/bits/vector.tcc **** 
 245:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 246:/usr/include/c++/5/bits/vector.tcc ****     template<typename _InputIterator>
 247:/usr/include/c++/5/bits/vector.tcc ****       void
 248:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 249:/usr/include/c++/5/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 250:/usr/include/c++/5/bits/vector.tcc **** 		    std::input_iterator_tag)
 251:/usr/include/c++/5/bits/vector.tcc ****       {
 252:/usr/include/c++/5/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 253:/usr/include/c++/5/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 254:/usr/include/c++/5/bits/vector.tcc **** 	     ++__cur, ++__first)
 255:/usr/include/c++/5/bits/vector.tcc **** 	  *__cur = *__first;
 256:/usr/include/c++/5/bits/vector.tcc **** 	if (__first == __last)
 257:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 258:/usr/include/c++/5/bits/vector.tcc **** 	else
 259:/usr/include/c++/5/bits/vector.tcc **** 	  insert(end(), __first, __last);
 260:/usr/include/c++/5/bits/vector.tcc ****       }
 261:/usr/include/c++/5/bits/vector.tcc **** 
 262:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 263:/usr/include/c++/5/bits/vector.tcc ****     template<typename _ForwardIterator>
 264:/usr/include/c++/5/bits/vector.tcc ****       void
 265:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 266:/usr/include/c++/5/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 267:/usr/include/c++/5/bits/vector.tcc **** 		    std::forward_iterator_tag)
 268:/usr/include/c++/5/bits/vector.tcc ****       {
 269:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 270:/usr/include/c++/5/bits/vector.tcc **** 
 271:/usr/include/c++/5/bits/vector.tcc **** 	if (__len > capacity())
 272:/usr/include/c++/5/bits/vector.tcc **** 	  {
 273:/usr/include/c++/5/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 274:/usr/include/c++/5/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 275:/usr/include/c++/5/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 276:/usr/include/c++/5/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 277:/usr/include/c++/5/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 278:/usr/include/c++/5/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 279:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 280:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 281:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 282:/usr/include/c++/5/bits/vector.tcc **** 	  }
 283:/usr/include/c++/5/bits/vector.tcc **** 	else if (size() >= __len)
 284:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 285:/usr/include/c++/5/bits/vector.tcc **** 	else
 286:/usr/include/c++/5/bits/vector.tcc **** 	  {
 287:/usr/include/c++/5/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 288:/usr/include/c++/5/bits/vector.tcc **** 	    std::advance(__mid, size());
 289:/usr/include/c++/5/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 290:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 291:/usr/include/c++/5/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 292:/usr/include/c++/5/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 293:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 294:/usr/include/c++/5/bits/vector.tcc **** 	  }
 295:/usr/include/c++/5/bits/vector.tcc ****       }
 296:/usr/include/c++/5/bits/vector.tcc **** 
 297:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 298:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 299:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 300:/usr/include/c++/5/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 301:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 302:/usr/include/c++/5/bits/vector.tcc ****       emplace(const_iterator __position, _Args&&... __args)
 303:/usr/include/c++/5/bits/vector.tcc ****       {
 304:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __n = __position - begin();
 305:/usr/include/c++/5/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 306:/usr/include/c++/5/bits/vector.tcc **** 	    && __position == end())
 307:/usr/include/c++/5/bits/vector.tcc **** 	  {
 308:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 309:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 310:/usr/include/c++/5/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 311:/usr/include/c++/5/bits/vector.tcc **** 	  }
 312:/usr/include/c++/5/bits/vector.tcc **** 	else
 313:/usr/include/c++/5/bits/vector.tcc **** 	  _M_insert_aux(begin() + (__position - cbegin()),
 314:/usr/include/c++/5/bits/vector.tcc **** 			std::forward<_Args>(__args)...);
 315:/usr/include/c++/5/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 316:/usr/include/c++/5/bits/vector.tcc ****       }
 317:/usr/include/c++/5/bits/vector.tcc **** 
 318:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 319:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 320:/usr/include/c++/5/bits/vector.tcc ****       void
 321:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 322:/usr/include/c++/5/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 323:/usr/include/c++/5/bits/vector.tcc **** #else
 324:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 325:/usr/include/c++/5/bits/vector.tcc ****     void
 326:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 327:/usr/include/c++/5/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 328:/usr/include/c++/5/bits/vector.tcc **** #endif
 329:/usr/include/c++/5/bits/vector.tcc ****     {
 330:/usr/include/c++/5/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 331:/usr/include/c++/5/bits/vector.tcc **** 	{
 332:/usr/include/c++/5/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 333:/usr/include/c++/5/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 334:/usr/include/c++/5/bits/vector.tcc **** 				                   - 1)));
 335:/usr/include/c++/5/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 336:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus < 201103L
 337:/usr/include/c++/5/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 338:/usr/include/c++/5/bits/vector.tcc **** #endif
 339:/usr/include/c++/5/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 340:/usr/include/c++/5/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 341:/usr/include/c++/5/bits/vector.tcc **** 				  this->_M_impl._M_finish - 1);
 342:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus < 201103L
 343:/usr/include/c++/5/bits/vector.tcc **** 	  *__position = __x_copy;
 344:/usr/include/c++/5/bits/vector.tcc **** #else
 345:/usr/include/c++/5/bits/vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 346:/usr/include/c++/5/bits/vector.tcc **** #endif
 347:/usr/include/c++/5/bits/vector.tcc **** 	}
 348:/usr/include/c++/5/bits/vector.tcc ****       else
 349:/usr/include/c++/5/bits/vector.tcc **** 	{
 350:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __len =
 351:/usr/include/c++/5/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 352:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 353:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 354:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 355:/usr/include/c++/5/bits/vector.tcc **** 	  __try
 356:/usr/include/c++/5/bits/vector.tcc **** 	    {
 357:/usr/include/c++/5/bits/vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 358:/usr/include/c++/5/bits/vector.tcc **** 	      // case, where the moves could alter a new element belonging
 359:/usr/include/c++/5/bits/vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 360:/usr/include/c++/5/bits/vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 361:/usr/include/c++/5/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl,
 362:/usr/include/c++/5/bits/vector.tcc **** 		                       __new_start + __elems_before,
 363:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 364:/usr/include/c++/5/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 365:/usr/include/c++/5/bits/vector.tcc **** #else
 366:/usr/include/c++/5/bits/vector.tcc **** 	                               __x);
 367:/usr/include/c++/5/bits/vector.tcc **** #endif
 368:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish = pointer();
 369:/usr/include/c++/5/bits/vector.tcc **** 
 370:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish
 371:/usr/include/c++/5/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 372:/usr/include/c++/5/bits/vector.tcc **** 		(this->_M_impl._M_start, __position.base(),
 373:/usr/include/c++/5/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 374:/usr/include/c++/5/bits/vector.tcc **** 
 375:/usr/include/c++/5/bits/vector.tcc **** 	      ++__new_finish;
 376:/usr/include/c++/5/bits/vector.tcc **** 
 377:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish
 378:/usr/include/c++/5/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 379:/usr/include/c++/5/bits/vector.tcc **** 		(__position.base(), this->_M_impl._M_finish,
 380:/usr/include/c++/5/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 381:/usr/include/c++/5/bits/vector.tcc **** 	    }
 382:/usr/include/c++/5/bits/vector.tcc ****           __catch(...)
 383:/usr/include/c++/5/bits/vector.tcc **** 	    {
 384:/usr/include/c++/5/bits/vector.tcc **** 	      if (!__new_finish)
 385:/usr/include/c++/5/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 386:/usr/include/c++/5/bits/vector.tcc **** 		                       __new_start + __elems_before);
 387:/usr/include/c++/5/bits/vector.tcc **** 	      else
 388:/usr/include/c++/5/bits/vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 389:/usr/include/c++/5/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 390:/usr/include/c++/5/bits/vector.tcc **** 	      __throw_exception_again;
 391:/usr/include/c++/5/bits/vector.tcc **** 	    }
 392:/usr/include/c++/5/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 393:/usr/include/c++/5/bits/vector.tcc **** 			_M_get_Tp_allocator());
 394:/usr/include/c++/5/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 395:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 396:/usr/include/c++/5/bits/vector.tcc **** 			- this->_M_impl._M_start);
 397:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 398:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 399:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 400:/usr/include/c++/5/bits/vector.tcc **** 	}
 401:/usr/include/c++/5/bits/vector.tcc ****     }
 402:/usr/include/c++/5/bits/vector.tcc **** 
 403:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 404:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 405:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 406:/usr/include/c++/5/bits/vector.tcc ****       void
 407:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  99              		.loc 3 407 0
 100              		.cfi_startproc
 101              	.LVL7:
 102 0000 4157     		pushq	%r15
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 15, -16
 105 0002 4156     		pushq	%r14
 106              		.cfi_def_cfa_offset 24
 107              		.cfi_offset 14, -24
 108 0004 4989FF   		movq	%rdi, %r15
 109 0007 4155     		pushq	%r13
 110              		.cfi_def_cfa_offset 32
 111              		.cfi_offset 13, -32
 112 0009 4154     		pushq	%r12
 113              		.cfi_def_cfa_offset 40
 114              		.cfi_offset 12, -40
 115 000b 4989F6   		movq	%rsi, %r14
 116 000e 55       		pushq	%rbp
 117              		.cfi_def_cfa_offset 48
 118              		.cfi_offset 6, -48
 119 000f 53       		pushq	%rbx
 120              		.cfi_def_cfa_offset 56
 121              		.cfi_offset 3, -56
 122 0010 4883EC08 		subq	$8, %rsp
 123              		.cfi_def_cfa_offset 64
 124              	.LBB490:
 125              	.LBB491:
 126              	.LBB492:
 127              	.LBB493:
 128              		.file 4 "/usr/include/c++/5/bits/stl_vector.h"
   1:/usr/include/c++/5/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_vector.h **** 
   3:/usr/include/c++/5/bits/stl_vector.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_vector.h **** //
   5:/usr/include/c++/5/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_vector.h **** 
  11:/usr/include/c++/5/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_vector.h **** 
  16:/usr/include/c++/5/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_vector.h **** 
  20:/usr/include/c++/5/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_vector.h **** 
  25:/usr/include/c++/5/bits/stl_vector.h **** /*
  26:/usr/include/c++/5/bits/stl_vector.h ****  *
  27:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_vector.h ****  *
  30:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_vector.h ****  *
  38:/usr/include/c++/5/bits/stl_vector.h ****  *
  39:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/5/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_vector.h ****  *
  42:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_vector.h ****  */
  50:/usr/include/c++/5/bits/stl_vector.h **** 
  51:/usr/include/c++/5/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/5/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/stl_vector.h ****  */
  55:/usr/include/c++/5/bits/stl_vector.h **** 
  56:/usr/include/c++/5/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/5/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/5/bits/stl_vector.h **** 
  59:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/5/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/5/bits/stl_vector.h **** #endif
  65:/usr/include/c++/5/bits/stl_vector.h **** 
  66:/usr/include/c++/5/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/5/bits/stl_vector.h **** {
  68:/usr/include/c++/5/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/5/bits/stl_vector.h **** 
  70:/usr/include/c++/5/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/5/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/5/bits/stl_vector.h ****     {
  74:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/5/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/5/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/5/bits/stl_vector.h **** 
  79:/usr/include/c++/5/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/5/bits/stl_vector.h ****       {
  82:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/5/bits/stl_vector.h **** 
  86:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  88:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/5/bits/stl_vector.h **** 
  90:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  92:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/5/bits/stl_vector.h **** 
  94:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
  98:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/5/bits/stl_vector.h **** #endif
 100:/usr/include/c++/5/bits/stl_vector.h **** 
 101:/usr/include/c++/5/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/5/bits/stl_vector.h **** 	{
 103:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/5/bits/stl_vector.h **** 	}
 107:/usr/include/c++/5/bits/stl_vector.h ****       };
 108:/usr/include/c++/5/bits/stl_vector.h ****       
 109:/usr/include/c++/5/bits/stl_vector.h ****     public:
 110:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/5/bits/stl_vector.h **** 
 112:/usr/include/c++/5/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/5/bits/stl_vector.h **** 
 116:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/5/bits/stl_vector.h **** 
 120:/usr/include/c++/5/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/5/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/5/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/5/bits/stl_vector.h **** 
 124:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/5/bits/stl_vector.h **** 
 127:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/5/bits/stl_vector.h **** 
 130:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/5/bits/stl_vector.h **** 
 134:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/5/bits/stl_vector.h **** 
 138:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/5/bits/stl_vector.h **** 
 142:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/5/bits/stl_vector.h **** 
 146:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/5/bits/stl_vector.h ****       {
 149:/usr/include/c++/5/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/5/bits/stl_vector.h **** 	else
 152:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/5/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/5/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/5/bits/stl_vector.h ****       }
 157:/usr/include/c++/5/bits/stl_vector.h **** #endif
 158:/usr/include/c++/5/bits/stl_vector.h **** 
 159:/usr/include/c++/5/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/5/bits/stl_vector.h **** 
 163:/usr/include/c++/5/bits/stl_vector.h ****     public:
 164:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/5/bits/stl_vector.h **** 
 166:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/5/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/5/bits/stl_vector.h ****       {
 169:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/5/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 171:/usr/include/c++/5/bits/stl_vector.h ****       }
 172:/usr/include/c++/5/bits/stl_vector.h **** 
 173:/usr/include/c++/5/bits/stl_vector.h ****       void
 174:/usr/include/c++/5/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/5/bits/stl_vector.h ****       {
 176:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/5/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/5/bits/stl_vector.h ****       }
 180:/usr/include/c++/5/bits/stl_vector.h **** 
 181:/usr/include/c++/5/bits/stl_vector.h ****     private:
 182:/usr/include/c++/5/bits/stl_vector.h ****       void
 183:/usr/include/c++/5/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/5/bits/stl_vector.h ****       {
 185:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/5/bits/stl_vector.h ****       }
 189:/usr/include/c++/5/bits/stl_vector.h ****     };
 190:/usr/include/c++/5/bits/stl_vector.h **** 
 191:/usr/include/c++/5/bits/stl_vector.h **** 
 192:/usr/include/c++/5/bits/stl_vector.h ****   /**
 193:/usr/include/c++/5/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/5/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/5/bits/stl_vector.h ****    *
 196:/usr/include/c++/5/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/5/bits/stl_vector.h ****    *
 198:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/5/bits/stl_vector.h ****    *
 201:/usr/include/c++/5/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/5/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/5/bits/stl_vector.h ****    *
 207:/usr/include/c++/5/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/5/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/5/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/5/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/5/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/5/bits/stl_vector.h ****   */
 213:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/5/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/5/bits/stl_vector.h ****     {
 216:/usr/include/c++/5/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/5/bits/stl_vector.h ****       
 221:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/5/bits/stl_vector.h **** 
 225:/usr/include/c++/5/bits/stl_vector.h ****     public:
 226:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/5/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/5/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/5/bits/stl_vector.h **** 
 240:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/5/bits/stl_vector.h **** 
 246:/usr/include/c++/5/bits/stl_vector.h ****     public:
 247:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/5/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/5/bits/stl_vector.h **** 
 250:/usr/include/c++/5/bits/stl_vector.h ****       /**
 251:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/5/bits/stl_vector.h ****        */
 253:/usr/include/c++/5/bits/stl_vector.h ****       vector()
 254:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/5/bits/stl_vector.h **** #endif
 257:/usr/include/c++/5/bits/stl_vector.h ****       : _Base() { }
 258:/usr/include/c++/5/bits/stl_vector.h **** 
 259:/usr/include/c++/5/bits/stl_vector.h ****       /**
 260:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/5/bits/stl_vector.h ****        */
 263:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 264:/usr/include/c++/5/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/5/bits/stl_vector.h **** 
 267:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 268:/usr/include/c++/5/bits/stl_vector.h ****       /**
 269:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/5/bits/stl_vector.h ****        *
 273:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/5/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/5/bits/stl_vector.h ****        */
 276:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/5/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/5/bits/stl_vector.h **** 
 281:/usr/include/c++/5/bits/stl_vector.h ****       /**
 282:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/5/bits/stl_vector.h ****        *
 287:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/5/bits/stl_vector.h ****        */
 289:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/5/bits/stl_vector.h **** #else
 294:/usr/include/c++/5/bits/stl_vector.h ****       /**
 295:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/5/bits/stl_vector.h ****        *
 300:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/5/bits/stl_vector.h ****        */
 302:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/5/bits/stl_vector.h **** #endif
 308:/usr/include/c++/5/bits/stl_vector.h **** 
 309:/usr/include/c++/5/bits/stl_vector.h ****       /**
 310:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/5/bits/stl_vector.h ****        *
 313:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/5/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/5/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/5/bits/stl_vector.h ****        */
 318:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/5/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 325:/usr/include/c++/5/bits/stl_vector.h ****       }
 326:/usr/include/c++/5/bits/stl_vector.h **** 
 327:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/5/bits/stl_vector.h ****       /**
 329:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/5/bits/stl_vector.h ****        *
 332:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/5/bits/stl_vector.h ****        */
 335:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/5/bits/stl_vector.h **** 
 338:/usr/include/c++/5/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/5/bits/stl_vector.h ****       }
 346:/usr/include/c++/5/bits/stl_vector.h **** 
 347:/usr/include/c++/5/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/5/bits/stl_vector.h ****       {
 352:/usr/include/c++/5/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/5/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/5/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/5/bits/stl_vector.h ****       }
 361:/usr/include/c++/5/bits/stl_vector.h **** 
 362:/usr/include/c++/5/bits/stl_vector.h ****       /**
 363:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/5/bits/stl_vector.h ****        *
 367:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/5/bits/stl_vector.h ****        *
 370:/usr/include/c++/5/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/5/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/5/bits/stl_vector.h ****        */
 373:/usr/include/c++/5/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/5/bits/stl_vector.h ****       {
 377:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:/usr/include/c++/5/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/5/bits/stl_vector.h ****       }
 380:/usr/include/c++/5/bits/stl_vector.h **** #endif
 381:/usr/include/c++/5/bits/stl_vector.h **** 
 382:/usr/include/c++/5/bits/stl_vector.h ****       /**
 383:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/5/bits/stl_vector.h ****        *
 388:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/5/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/5/bits/stl_vector.h ****        *
 391:/usr/include/c++/5/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/5/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/5/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/5/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/5/bits/stl_vector.h ****        */
 398:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/5/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/5/bits/stl_vector.h **** #else
 406:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/5/bits/stl_vector.h ****         {
 411:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/5/bits/stl_vector.h **** 	}
 415:/usr/include/c++/5/bits/stl_vector.h **** #endif
 416:/usr/include/c++/5/bits/stl_vector.h **** 
 417:/usr/include/c++/5/bits/stl_vector.h ****       /**
 418:/usr/include/c++/5/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/5/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/5/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/5/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/5/bits/stl_vector.h ****        */
 423:/usr/include/c++/5/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/5/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 426:/usr/include/c++/5/bits/stl_vector.h **** 
 427:/usr/include/c++/5/bits/stl_vector.h ****       /**
 428:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:/usr/include/c++/5/bits/stl_vector.h ****        *
 431:/usr/include/c++/5/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:/usr/include/c++/5/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:/usr/include/c++/5/bits/stl_vector.h ****        */
 435:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 436:/usr/include/c++/5/bits/stl_vector.h ****       operator=(const vector& __x);
 437:/usr/include/c++/5/bits/stl_vector.h **** 
 438:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 439:/usr/include/c++/5/bits/stl_vector.h ****       /**
 440:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:/usr/include/c++/5/bits/stl_vector.h ****        *
 443:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:/usr/include/c++/5/bits/stl_vector.h ****        *  if the allocators permit it).
 445:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:/usr/include/c++/5/bits/stl_vector.h ****        */
 447:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 448:/usr/include/c++/5/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:/usr/include/c++/5/bits/stl_vector.h ****       {
 450:/usr/include/c++/5/bits/stl_vector.h ****         constexpr bool __move_storage =
 451:/usr/include/c++/5/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:/usr/include/c++/5/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:/usr/include/c++/5/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 454:/usr/include/c++/5/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 456:/usr/include/c++/5/bits/stl_vector.h ****       }
 457:/usr/include/c++/5/bits/stl_vector.h **** 
 458:/usr/include/c++/5/bits/stl_vector.h ****       /**
 459:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 461:/usr/include/c++/5/bits/stl_vector.h ****        *
 462:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 464:/usr/include/c++/5/bits/stl_vector.h ****        *
 465:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:/usr/include/c++/5/bits/stl_vector.h ****        */
 469:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 470:/usr/include/c++/5/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:/usr/include/c++/5/bits/stl_vector.h ****       {
 472:/usr/include/c++/5/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 474:/usr/include/c++/5/bits/stl_vector.h ****       }
 475:/usr/include/c++/5/bits/stl_vector.h **** #endif
 476:/usr/include/c++/5/bits/stl_vector.h **** 
 477:/usr/include/c++/5/bits/stl_vector.h ****       /**
 478:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:/usr/include/c++/5/bits/stl_vector.h ****        *
 482:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:/usr/include/c++/5/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:/usr/include/c++/5/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:/usr/include/c++/5/bits/stl_vector.h ****        */
 487:/usr/include/c++/5/bits/stl_vector.h ****       void
 488:/usr/include/c++/5/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:/usr/include/c++/5/bits/stl_vector.h **** 
 491:/usr/include/c++/5/bits/stl_vector.h ****       /**
 492:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 493:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 494:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 495:/usr/include/c++/5/bits/stl_vector.h ****        *
 496:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:/usr/include/c++/5/bits/stl_vector.h ****        *  range [__first,__last).
 498:/usr/include/c++/5/bits/stl_vector.h ****        *
 499:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:/usr/include/c++/5/bits/stl_vector.h ****        */
 503:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 504:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 505:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:/usr/include/c++/5/bits/stl_vector.h ****         void
 507:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:/usr/include/c++/5/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:/usr/include/c++/5/bits/stl_vector.h **** #else
 510:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 511:/usr/include/c++/5/bits/stl_vector.h ****         void
 512:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:/usr/include/c++/5/bits/stl_vector.h ****         {
 514:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:/usr/include/c++/5/bits/stl_vector.h **** 	}
 518:/usr/include/c++/5/bits/stl_vector.h **** #endif
 519:/usr/include/c++/5/bits/stl_vector.h **** 
 520:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 521:/usr/include/c++/5/bits/stl_vector.h ****       /**
 522:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 524:/usr/include/c++/5/bits/stl_vector.h ****        *
 525:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 527:/usr/include/c++/5/bits/stl_vector.h ****        *
 528:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:/usr/include/c++/5/bits/stl_vector.h ****        */
 532:/usr/include/c++/5/bits/stl_vector.h ****       void
 533:/usr/include/c++/5/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:/usr/include/c++/5/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:/usr/include/c++/5/bits/stl_vector.h **** #endif
 536:/usr/include/c++/5/bits/stl_vector.h **** 
 537:/usr/include/c++/5/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::get_allocator;
 539:/usr/include/c++/5/bits/stl_vector.h **** 
 540:/usr/include/c++/5/bits/stl_vector.h ****       // iterators
 541:/usr/include/c++/5/bits/stl_vector.h ****       /**
 542:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/5/bits/stl_vector.h ****        */
 546:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 547:/usr/include/c++/5/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/5/bits/stl_vector.h **** 
 550:/usr/include/c++/5/bits/stl_vector.h ****       /**
 551:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:/usr/include/c++/5/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/5/bits/stl_vector.h ****        */
 555:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 556:/usr/include/c++/5/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 558:/usr/include/c++/5/bits/stl_vector.h **** 
 559:/usr/include/c++/5/bits/stl_vector.h ****       /**
 560:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 563:/usr/include/c++/5/bits/stl_vector.h ****        */
 564:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 565:/usr/include/c++/5/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/5/bits/stl_vector.h **** 
 568:/usr/include/c++/5/bits/stl_vector.h ****       /**
 569:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:/usr/include/c++/5/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:/usr/include/c++/5/bits/stl_vector.h ****        *  ordinary element order.
 572:/usr/include/c++/5/bits/stl_vector.h ****        */
 573:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 574:/usr/include/c++/5/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 575:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 576:/usr/include/c++/5/bits/stl_vector.h **** 
 577:/usr/include/c++/5/bits/stl_vector.h ****       /**
 578:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 579:/usr/include/c++/5/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 580:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 581:/usr/include/c++/5/bits/stl_vector.h ****        */
 582:/usr/include/c++/5/bits/stl_vector.h ****       reverse_iterator
 583:/usr/include/c++/5/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 584:/usr/include/c++/5/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 585:/usr/include/c++/5/bits/stl_vector.h **** 
 586:/usr/include/c++/5/bits/stl_vector.h ****       /**
 587:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 588:/usr/include/c++/5/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 589:/usr/include/c++/5/bits/stl_vector.h ****        *  reverse element order.
 590:/usr/include/c++/5/bits/stl_vector.h ****        */
 591:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 592:/usr/include/c++/5/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 593:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 594:/usr/include/c++/5/bits/stl_vector.h **** 
 595:/usr/include/c++/5/bits/stl_vector.h ****       /**
 596:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 597:/usr/include/c++/5/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 598:/usr/include/c++/5/bits/stl_vector.h ****        *  in reverse element order.
 599:/usr/include/c++/5/bits/stl_vector.h ****        */
 600:/usr/include/c++/5/bits/stl_vector.h ****       reverse_iterator
 601:/usr/include/c++/5/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 602:/usr/include/c++/5/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 603:/usr/include/c++/5/bits/stl_vector.h **** 
 604:/usr/include/c++/5/bits/stl_vector.h ****       /**
 605:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 606:/usr/include/c++/5/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 607:/usr/include/c++/5/bits/stl_vector.h ****        *  is done in reverse element order.
 608:/usr/include/c++/5/bits/stl_vector.h ****        */
 609:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 610:/usr/include/c++/5/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 611:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 612:/usr/include/c++/5/bits/stl_vector.h **** 
 613:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 614:/usr/include/c++/5/bits/stl_vector.h ****       /**
 615:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 616:/usr/include/c++/5/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 617:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 618:/usr/include/c++/5/bits/stl_vector.h ****        */
 619:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 620:/usr/include/c++/5/bits/stl_vector.h ****       cbegin() const noexcept
 621:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 622:/usr/include/c++/5/bits/stl_vector.h **** 
 623:/usr/include/c++/5/bits/stl_vector.h ****       /**
 624:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 625:/usr/include/c++/5/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 626:/usr/include/c++/5/bits/stl_vector.h ****        *  ordinary element order.
 627:/usr/include/c++/5/bits/stl_vector.h ****        */
 628:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 629:/usr/include/c++/5/bits/stl_vector.h ****       cend() const noexcept
 630:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 631:/usr/include/c++/5/bits/stl_vector.h **** 
 632:/usr/include/c++/5/bits/stl_vector.h ****       /**
 633:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:/usr/include/c++/5/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 635:/usr/include/c++/5/bits/stl_vector.h ****        *  reverse element order.
 636:/usr/include/c++/5/bits/stl_vector.h ****        */
 637:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 638:/usr/include/c++/5/bits/stl_vector.h ****       crbegin() const noexcept
 639:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 640:/usr/include/c++/5/bits/stl_vector.h **** 
 641:/usr/include/c++/5/bits/stl_vector.h ****       /**
 642:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 643:/usr/include/c++/5/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 644:/usr/include/c++/5/bits/stl_vector.h ****        *  is done in reverse element order.
 645:/usr/include/c++/5/bits/stl_vector.h ****        */
 646:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 647:/usr/include/c++/5/bits/stl_vector.h ****       crend() const noexcept
 648:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 649:/usr/include/c++/5/bits/stl_vector.h **** #endif
 650:/usr/include/c++/5/bits/stl_vector.h **** 
 651:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.2] capacity
 652:/usr/include/c++/5/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 653:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 654:/usr/include/c++/5/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 655:/usr/include/c++/5/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 129              		.loc 4 655 0
 130 0014 488B5F08 		movq	8(%rdi), %rbx
 131 0018 4889D8   		movq	%rbx, %rax
 132 001b 482B07   		subq	(%rdi), %rax
 133 001e 48C1F803 		sarq	$3, %rax
 134              	.LVL8:
 135              	.LBE493:
 136              	.LBE492:
 137              	.LBB494:
 138              	.LBB495:
 139              		.file 5 "/usr/include/c++/5/bits/stl_algobase.h"
   1:/usr/include/c++/5/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_algobase.h **** 
   3:/usr/include/c++/5/bits/stl_algobase.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_algobase.h **** //
   5:/usr/include/c++/5/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_algobase.h **** 
  11:/usr/include/c++/5/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_algobase.h **** 
  16:/usr/include/c++/5/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_algobase.h **** 
  20:/usr/include/c++/5/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_algobase.h **** 
  25:/usr/include/c++/5/bits/stl_algobase.h **** /*
  26:/usr/include/c++/5/bits/stl_algobase.h ****  *
  27:/usr/include/c++/5/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_algobase.h ****  *
  30:/usr/include/c++/5/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_algobase.h ****  *
  38:/usr/include/c++/5/bits/stl_algobase.h ****  *
  39:/usr/include/c++/5/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/5/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_algobase.h ****  *
  42:/usr/include/c++/5/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_algobase.h ****  */
  50:/usr/include/c++/5/bits/stl_algobase.h **** 
  51:/usr/include/c++/5/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/5/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/5/bits/stl_algobase.h ****  */
  55:/usr/include/c++/5/bits/stl_algobase.h **** 
  56:/usr/include/c++/5/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/5/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/5/bits/stl_algobase.h **** 
  59:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/5/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/5/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/5/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/5/bits/stl_algobase.h **** 
  73:/usr/include/c++/5/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/5/bits/stl_algobase.h **** {
  75:/usr/include/c++/5/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/5/bits/stl_algobase.h **** 
  77:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/5/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/5/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/5/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/5/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/5/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/5/bits/stl_algobase.h ****     {
  84:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/5/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/5/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/5/bits/stl_algobase.h ****         {
  88:/usr/include/c++/5/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/5/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/5/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/5/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/5/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/5/bits/stl_algobase.h **** 	}
  94:/usr/include/c++/5/bits/stl_algobase.h ****     };
  95:/usr/include/c++/5/bits/stl_algobase.h **** 
  96:/usr/include/c++/5/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/5/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/5/bits/stl_algobase.h ****     {
  99:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/5/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/5/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/5/bits/stl_algobase.h ****         {
 103:/usr/include/c++/5/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/5/bits/stl_algobase.h ****         }
 105:/usr/include/c++/5/bits/stl_algobase.h ****     };
 106:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/5/bits/stl_algobase.h **** 
 108:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/5/bits/stl_algobase.h ****    *
 115:/usr/include/c++/5/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/5/bits/stl_algobase.h ****    *  iterators themselves.
 117:/usr/include/c++/5/bits/stl_algobase.h ****   */
 118:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/5/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/5/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/5/bits/stl_algobase.h ****     {
 122:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/5/bits/stl_algobase.h **** 
 128:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/5/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/5/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/5/bits/stl_algobase.h **** 
 134:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/5/bits/stl_algobase.h **** 
 139:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/5/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/5/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/5/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/5/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/5/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/5/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/5/bits/stl_algobase.h **** #else
 148:/usr/include/c++/5/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/5/bits/stl_algobase.h ****     }
 151:/usr/include/c++/5/bits/stl_algobase.h **** 
 152:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/5/bits/stl_algobase.h ****    *
 160:/usr/include/c++/5/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/5/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/5/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/5/bits/stl_algobase.h ****   */
 164:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/5/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/5/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/5/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/5/bits/stl_algobase.h ****     {
 169:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/5/bits/stl_algobase.h **** 
 176:/usr/include/c++/5/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 177:/usr/include/c++/5/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/5/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/5/bits/stl_algobase.h ****     }
 180:/usr/include/c++/5/bits/stl_algobase.h **** 
 181:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/5/bits/stl_algobase.h ****    *
 188:/usr/include/c++/5/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/5/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/5/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/5/bits/stl_algobase.h ****   */
 192:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 195:/usr/include/c++/5/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/usr/include/c++/5/bits/stl_algobase.h ****     {
 197:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 198:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/usr/include/c++/5/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/usr/include/c++/5/bits/stl_algobase.h ****       if (__b < __a)
 201:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 202:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 203:/usr/include/c++/5/bits/stl_algobase.h ****     }
 204:/usr/include/c++/5/bits/stl_algobase.h **** 
 205:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 206:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/usr/include/c++/5/bits/stl_algobase.h ****    *
 212:/usr/include/c++/5/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/usr/include/c++/5/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/usr/include/c++/5/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/usr/include/c++/5/bits/stl_algobase.h ****   */
 216:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp>
 217:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 219:/usr/include/c++/5/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 220:/usr/include/c++/5/bits/stl_algobase.h ****     {
 221:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 222:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/usr/include/c++/5/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/usr/include/c++/5/bits/stl_algobase.h ****       if (__a < __b)
 140              		.loc 5 224 0
 141 0022 4885C0   		testq	%rax, %rax
 142 0025 7419     		je	.L12
 143              	.LVL9:
 144              	.LBE495:
 145              	.LBE494:
 656:/usr/include/c++/5/bits/stl_vector.h **** 
 657:/usr/include/c++/5/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 658:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 659:/usr/include/c++/5/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 660:/usr/include/c++/5/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 661:/usr/include/c++/5/bits/stl_vector.h **** 
 662:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 663:/usr/include/c++/5/bits/stl_vector.h ****       /**
 664:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 665:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 666:/usr/include/c++/5/bits/stl_vector.h ****        *
 667:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 668:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 669:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 670:/usr/include/c++/5/bits/stl_vector.h ****        *  default constructed elements are appended.
 671:/usr/include/c++/5/bits/stl_vector.h ****        */
 672:/usr/include/c++/5/bits/stl_vector.h ****       void
 673:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size)
 674:/usr/include/c++/5/bits/stl_vector.h ****       {
 675:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 676:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 677:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 678:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 679:/usr/include/c++/5/bits/stl_vector.h ****       }
 680:/usr/include/c++/5/bits/stl_vector.h **** 
 681:/usr/include/c++/5/bits/stl_vector.h ****       /**
 682:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 683:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 684:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 685:/usr/include/c++/5/bits/stl_vector.h ****        *
 686:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 687:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 688:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 689:/usr/include/c++/5/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 690:/usr/include/c++/5/bits/stl_vector.h ****        *  given data.
 691:/usr/include/c++/5/bits/stl_vector.h ****        */
 692:/usr/include/c++/5/bits/stl_vector.h ****       void
 693:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 694:/usr/include/c++/5/bits/stl_vector.h ****       {
 695:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 696:/usr/include/c++/5/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 697:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 698:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 699:/usr/include/c++/5/bits/stl_vector.h ****       }
 700:/usr/include/c++/5/bits/stl_vector.h **** #else
 701:/usr/include/c++/5/bits/stl_vector.h ****       /**
 702:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 703:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 704:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 705:/usr/include/c++/5/bits/stl_vector.h ****        *
 706:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 707:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 708:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 709:/usr/include/c++/5/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 710:/usr/include/c++/5/bits/stl_vector.h ****        *  given data.
 711:/usr/include/c++/5/bits/stl_vector.h ****        */
 712:/usr/include/c++/5/bits/stl_vector.h ****       void
 713:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 714:/usr/include/c++/5/bits/stl_vector.h ****       {
 715:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 716:/usr/include/c++/5/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 717:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 718:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 719:/usr/include/c++/5/bits/stl_vector.h ****       }
 720:/usr/include/c++/5/bits/stl_vector.h **** #endif
 721:/usr/include/c++/5/bits/stl_vector.h **** 
 722:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 723:/usr/include/c++/5/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 724:/usr/include/c++/5/bits/stl_vector.h ****       void
 725:/usr/include/c++/5/bits/stl_vector.h ****       shrink_to_fit()
 726:/usr/include/c++/5/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 727:/usr/include/c++/5/bits/stl_vector.h **** #endif
 728:/usr/include/c++/5/bits/stl_vector.h **** 
 729:/usr/include/c++/5/bits/stl_vector.h ****       /**
 730:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 731:/usr/include/c++/5/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 732:/usr/include/c++/5/bits/stl_vector.h ****        */
 733:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 734:/usr/include/c++/5/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 735:/usr/include/c++/5/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 736:/usr/include/c++/5/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 737:/usr/include/c++/5/bits/stl_vector.h **** 
 738:/usr/include/c++/5/bits/stl_vector.h ****       /**
 739:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 740:/usr/include/c++/5/bits/stl_vector.h ****        *  equal end().)
 741:/usr/include/c++/5/bits/stl_vector.h ****        */
 742:/usr/include/c++/5/bits/stl_vector.h ****       bool
 743:/usr/include/c++/5/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 744:/usr/include/c++/5/bits/stl_vector.h ****       { return begin() == end(); }
 745:/usr/include/c++/5/bits/stl_vector.h **** 
 746:/usr/include/c++/5/bits/stl_vector.h ****       /**
 747:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 748:/usr/include/c++/5/bits/stl_vector.h ****        *          elements.
 749:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 750:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 751:/usr/include/c++/5/bits/stl_vector.h ****        *
 752:/usr/include/c++/5/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 753:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 754:/usr/include/c++/5/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 755:/usr/include/c++/5/bits/stl_vector.h ****        *  thrown.
 756:/usr/include/c++/5/bits/stl_vector.h ****        *
 757:/usr/include/c++/5/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 758:/usr/include/c++/5/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 759:/usr/include/c++/5/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 760:/usr/include/c++/5/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 761:/usr/include/c++/5/bits/stl_vector.h ****        *  and copying of %vector data.
 762:/usr/include/c++/5/bits/stl_vector.h ****        */
 763:/usr/include/c++/5/bits/stl_vector.h ****       void
 764:/usr/include/c++/5/bits/stl_vector.h ****       reserve(size_type __n);
 765:/usr/include/c++/5/bits/stl_vector.h **** 
 766:/usr/include/c++/5/bits/stl_vector.h ****       // element access
 767:/usr/include/c++/5/bits/stl_vector.h ****       /**
 768:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 769:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 770:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 771:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 772:/usr/include/c++/5/bits/stl_vector.h ****        *
 773:/usr/include/c++/5/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 774:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 775:/usr/include/c++/5/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 776:/usr/include/c++/5/bits/stl_vector.h ****        *  see at().)
 777:/usr/include/c++/5/bits/stl_vector.h ****        */
 778:/usr/include/c++/5/bits/stl_vector.h ****       reference
 779:/usr/include/c++/5/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 780:/usr/include/c++/5/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 781:/usr/include/c++/5/bits/stl_vector.h **** 
 782:/usr/include/c++/5/bits/stl_vector.h ****       /**
 783:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 784:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 785:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 786:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 787:/usr/include/c++/5/bits/stl_vector.h ****        *
 788:/usr/include/c++/5/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 789:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 790:/usr/include/c++/5/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 791:/usr/include/c++/5/bits/stl_vector.h ****        *  see at().)
 792:/usr/include/c++/5/bits/stl_vector.h ****        */
 793:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 794:/usr/include/c++/5/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 795:/usr/include/c++/5/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 796:/usr/include/c++/5/bits/stl_vector.h **** 
 797:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 798:/usr/include/c++/5/bits/stl_vector.h ****       /// Safety check used only from at().
 799:/usr/include/c++/5/bits/stl_vector.h ****       void
 800:/usr/include/c++/5/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 801:/usr/include/c++/5/bits/stl_vector.h ****       {
 802:/usr/include/c++/5/bits/stl_vector.h **** 	if (__n >= this->size())
 803:/usr/include/c++/5/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 804:/usr/include/c++/5/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
 805:/usr/include/c++/5/bits/stl_vector.h **** 				       "(which is %zu)"),
 806:/usr/include/c++/5/bits/stl_vector.h **** 				   __n, this->size());
 807:/usr/include/c++/5/bits/stl_vector.h ****       }
 808:/usr/include/c++/5/bits/stl_vector.h **** 
 809:/usr/include/c++/5/bits/stl_vector.h ****     public:
 810:/usr/include/c++/5/bits/stl_vector.h ****       /**
 811:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 812:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 813:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 814:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 815:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 816:/usr/include/c++/5/bits/stl_vector.h ****        *
 817:/usr/include/c++/5/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 818:/usr/include/c++/5/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 819:/usr/include/c++/5/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 820:/usr/include/c++/5/bits/stl_vector.h ****        */
 821:/usr/include/c++/5/bits/stl_vector.h ****       reference
 822:/usr/include/c++/5/bits/stl_vector.h ****       at(size_type __n)
 823:/usr/include/c++/5/bits/stl_vector.h ****       {
 824:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_check(__n);
 825:/usr/include/c++/5/bits/stl_vector.h **** 	return (*this)[__n]; 
 826:/usr/include/c++/5/bits/stl_vector.h ****       }
 827:/usr/include/c++/5/bits/stl_vector.h **** 
 828:/usr/include/c++/5/bits/stl_vector.h ****       /**
 829:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 830:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 831:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 832:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 833:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 834:/usr/include/c++/5/bits/stl_vector.h ****        *
 835:/usr/include/c++/5/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 836:/usr/include/c++/5/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 837:/usr/include/c++/5/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 838:/usr/include/c++/5/bits/stl_vector.h ****        */
 839:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 840:/usr/include/c++/5/bits/stl_vector.h ****       at(size_type __n) const
 841:/usr/include/c++/5/bits/stl_vector.h ****       {
 842:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_check(__n);
 843:/usr/include/c++/5/bits/stl_vector.h **** 	return (*this)[__n];
 844:/usr/include/c++/5/bits/stl_vector.h ****       }
 845:/usr/include/c++/5/bits/stl_vector.h **** 
 846:/usr/include/c++/5/bits/stl_vector.h ****       /**
 847:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 848:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 849:/usr/include/c++/5/bits/stl_vector.h ****        */
 850:/usr/include/c++/5/bits/stl_vector.h ****       reference
 851:/usr/include/c++/5/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 852:/usr/include/c++/5/bits/stl_vector.h ****       { return *begin(); }
 853:/usr/include/c++/5/bits/stl_vector.h **** 
 854:/usr/include/c++/5/bits/stl_vector.h ****       /**
 855:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 856:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 857:/usr/include/c++/5/bits/stl_vector.h ****        */
 858:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 859:/usr/include/c++/5/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/5/bits/stl_vector.h ****       { return *begin(); }
 861:/usr/include/c++/5/bits/stl_vector.h **** 
 862:/usr/include/c++/5/bits/stl_vector.h ****       /**
 863:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 864:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 865:/usr/include/c++/5/bits/stl_vector.h ****        */
 866:/usr/include/c++/5/bits/stl_vector.h ****       reference
 867:/usr/include/c++/5/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/5/bits/stl_vector.h ****       { return *(end() - 1); }
 869:/usr/include/c++/5/bits/stl_vector.h ****       
 870:/usr/include/c++/5/bits/stl_vector.h ****       /**
 871:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 872:/usr/include/c++/5/bits/stl_vector.h ****        *  last element of the %vector.
 873:/usr/include/c++/5/bits/stl_vector.h ****        */
 874:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 875:/usr/include/c++/5/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 876:/usr/include/c++/5/bits/stl_vector.h ****       { return *(end() - 1); }
 877:/usr/include/c++/5/bits/stl_vector.h **** 
 878:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 879:/usr/include/c++/5/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 880:/usr/include/c++/5/bits/stl_vector.h ****       // data access
 881:/usr/include/c++/5/bits/stl_vector.h ****       /**
 882:/usr/include/c++/5/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 883:/usr/include/c++/5/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 884:/usr/include/c++/5/bits/stl_vector.h ****        */
 885:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 886:/usr/include/c++/5/bits/stl_vector.h ****       _Tp*
 887:/usr/include/c++/5/bits/stl_vector.h **** #else
 888:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 889:/usr/include/c++/5/bits/stl_vector.h **** #endif
 890:/usr/include/c++/5/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 891:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 892:/usr/include/c++/5/bits/stl_vector.h **** 
 893:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 894:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp*
 895:/usr/include/c++/5/bits/stl_vector.h **** #else
 896:/usr/include/c++/5/bits/stl_vector.h ****       const_pointer
 897:/usr/include/c++/5/bits/stl_vector.h **** #endif
 898:/usr/include/c++/5/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 899:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 900:/usr/include/c++/5/bits/stl_vector.h **** 
 901:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 902:/usr/include/c++/5/bits/stl_vector.h ****       /**
 903:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 904:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 905:/usr/include/c++/5/bits/stl_vector.h ****        *
 906:/usr/include/c++/5/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 907:/usr/include/c++/5/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 908:/usr/include/c++/5/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 909:/usr/include/c++/5/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 910:/usr/include/c++/5/bits/stl_vector.h ****        *  available.
 911:/usr/include/c++/5/bits/stl_vector.h ****        */
 912:/usr/include/c++/5/bits/stl_vector.h ****       void
 913:/usr/include/c++/5/bits/stl_vector.h ****       push_back(const value_type& __x)
 914:/usr/include/c++/5/bits/stl_vector.h ****       {
 915:/usr/include/c++/5/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 916:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 917:/usr/include/c++/5/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 918:/usr/include/c++/5/bits/stl_vector.h **** 	                             __x);
 919:/usr/include/c++/5/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 920:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 921:/usr/include/c++/5/bits/stl_vector.h **** 	else
 922:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 923:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 924:/usr/include/c++/5/bits/stl_vector.h **** #else
 925:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 926:/usr/include/c++/5/bits/stl_vector.h **** #endif
 927:/usr/include/c++/5/bits/stl_vector.h ****       }
 928:/usr/include/c++/5/bits/stl_vector.h **** 
 929:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 930:/usr/include/c++/5/bits/stl_vector.h ****       void
 931:/usr/include/c++/5/bits/stl_vector.h ****       push_back(value_type&& __x)
 932:/usr/include/c++/5/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 933:/usr/include/c++/5/bits/stl_vector.h **** 
 934:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
 935:/usr/include/c++/5/bits/stl_vector.h ****         void
 936:/usr/include/c++/5/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 937:/usr/include/c++/5/bits/stl_vector.h **** #endif
 938:/usr/include/c++/5/bits/stl_vector.h **** 
 939:/usr/include/c++/5/bits/stl_vector.h ****       /**
 940:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Removes last element.
 941:/usr/include/c++/5/bits/stl_vector.h ****        *
 942:/usr/include/c++/5/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 943:/usr/include/c++/5/bits/stl_vector.h ****        *
 944:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 945:/usr/include/c++/5/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 946:/usr/include/c++/5/bits/stl_vector.h ****        *  called.
 947:/usr/include/c++/5/bits/stl_vector.h ****        */
 948:/usr/include/c++/5/bits/stl_vector.h ****       void
 949:/usr/include/c++/5/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 950:/usr/include/c++/5/bits/stl_vector.h ****       {
 951:/usr/include/c++/5/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 952:/usr/include/c++/5/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 953:/usr/include/c++/5/bits/stl_vector.h ****       }
 954:/usr/include/c++/5/bits/stl_vector.h **** 
 955:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 956:/usr/include/c++/5/bits/stl_vector.h ****       /**
 957:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 958:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 959:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __args  Arguments.
 960:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 961:/usr/include/c++/5/bits/stl_vector.h ****        *
 962:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 963:/usr/include/c++/5/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 964:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 965:/usr/include/c++/5/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 966:/usr/include/c++/5/bits/stl_vector.h ****        *  std::list.
 967:/usr/include/c++/5/bits/stl_vector.h ****        */
 968:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
 969:/usr/include/c++/5/bits/stl_vector.h ****         iterator
 970:/usr/include/c++/5/bits/stl_vector.h ****         emplace(const_iterator __position, _Args&&... __args);
 971:/usr/include/c++/5/bits/stl_vector.h **** 
 972:/usr/include/c++/5/bits/stl_vector.h ****       /**
 973:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 974:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 975:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 976:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 977:/usr/include/c++/5/bits/stl_vector.h ****        *
 978:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 979:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 980:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 981:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
 982:/usr/include/c++/5/bits/stl_vector.h ****        */
 983:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 984:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
 985:/usr/include/c++/5/bits/stl_vector.h **** #else
 986:/usr/include/c++/5/bits/stl_vector.h ****       /**
 987:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 988:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 989:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 990:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 991:/usr/include/c++/5/bits/stl_vector.h ****        *
 992:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 993:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 994:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 995:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
 996:/usr/include/c++/5/bits/stl_vector.h ****        */
 997:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 998:/usr/include/c++/5/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 999:/usr/include/c++/5/bits/stl_vector.h **** #endif
1000:/usr/include/c++/5/bits/stl_vector.h **** 
1001:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1002:/usr/include/c++/5/bits/stl_vector.h ****       /**
1003:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1004:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1005:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1006:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1007:/usr/include/c++/5/bits/stl_vector.h ****        *
1008:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1009:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1010:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1011:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
1012:/usr/include/c++/5/bits/stl_vector.h ****        */
1013:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1014:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1015:/usr/include/c++/5/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
1016:/usr/include/c++/5/bits/stl_vector.h **** 
1017:/usr/include/c++/5/bits/stl_vector.h ****       /**
1018:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1019:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1020:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1021:/usr/include/c++/5/bits/stl_vector.h ****        *
1022:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
1023:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1024:/usr/include/c++/5/bits/stl_vector.h ****        *  specified by @a position.
1025:/usr/include/c++/5/bits/stl_vector.h ****        *
1026:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1027:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1028:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1029:/usr/include/c++/5/bits/stl_vector.h ****        */
1030:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1031:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1032:/usr/include/c++/5/bits/stl_vector.h ****       { return this->insert(__position, __l.begin(), __l.end()); }
1033:/usr/include/c++/5/bits/stl_vector.h **** #endif
1034:/usr/include/c++/5/bits/stl_vector.h **** 
1035:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1036:/usr/include/c++/5/bits/stl_vector.h ****       /**
1037:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1038:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1039:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1040:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1041:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1042:/usr/include/c++/5/bits/stl_vector.h ****        *
1043:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1044:/usr/include/c++/5/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1045:/usr/include/c++/5/bits/stl_vector.h ****        *
1046:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1047:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1048:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1049:/usr/include/c++/5/bits/stl_vector.h ****        */
1050:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1051:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1052:/usr/include/c++/5/bits/stl_vector.h ****       {
1053:/usr/include/c++/5/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1054:/usr/include/c++/5/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1055:/usr/include/c++/5/bits/stl_vector.h **** 	return begin() + __offset;
1056:/usr/include/c++/5/bits/stl_vector.h ****       }
1057:/usr/include/c++/5/bits/stl_vector.h **** #else
1058:/usr/include/c++/5/bits/stl_vector.h ****       /**
1059:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1060:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1061:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1062:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1063:/usr/include/c++/5/bits/stl_vector.h ****        *
1064:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1065:/usr/include/c++/5/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1066:/usr/include/c++/5/bits/stl_vector.h ****        *
1067:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1068:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1069:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1070:/usr/include/c++/5/bits/stl_vector.h ****        */
1071:/usr/include/c++/5/bits/stl_vector.h ****       void
1072:/usr/include/c++/5/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1073:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1074:/usr/include/c++/5/bits/stl_vector.h **** #endif
1075:/usr/include/c++/5/bits/stl_vector.h **** 
1076:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1077:/usr/include/c++/5/bits/stl_vector.h ****       /**
1078:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1079:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1080:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1081:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1082:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1083:/usr/include/c++/5/bits/stl_vector.h ****        *
1084:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1085:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1086:/usr/include/c++/5/bits/stl_vector.h ****        *  by @a pos.
1087:/usr/include/c++/5/bits/stl_vector.h ****        *
1088:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1089:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1090:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1091:/usr/include/c++/5/bits/stl_vector.h ****        */
1092:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
1093:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1094:/usr/include/c++/5/bits/stl_vector.h ****         iterator
1095:/usr/include/c++/5/bits/stl_vector.h ****         insert(const_iterator __position, _InputIterator __first,
1096:/usr/include/c++/5/bits/stl_vector.h **** 	       _InputIterator __last)
1097:/usr/include/c++/5/bits/stl_vector.h ****         {
1098:/usr/include/c++/5/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1099:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1100:/usr/include/c++/5/bits/stl_vector.h **** 			     __first, __last, __false_type());
1101:/usr/include/c++/5/bits/stl_vector.h **** 	  return begin() + __offset;
1102:/usr/include/c++/5/bits/stl_vector.h **** 	}
1103:/usr/include/c++/5/bits/stl_vector.h **** #else
1104:/usr/include/c++/5/bits/stl_vector.h ****       /**
1105:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1106:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1107:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1108:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1109:/usr/include/c++/5/bits/stl_vector.h ****        *
1110:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1111:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1112:/usr/include/c++/5/bits/stl_vector.h ****        *  by @a pos.
1113:/usr/include/c++/5/bits/stl_vector.h ****        *
1114:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1115:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1116:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1117:/usr/include/c++/5/bits/stl_vector.h ****        */
1118:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1119:/usr/include/c++/5/bits/stl_vector.h ****         void
1120:/usr/include/c++/5/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1121:/usr/include/c++/5/bits/stl_vector.h **** 	       _InputIterator __last)
1122:/usr/include/c++/5/bits/stl_vector.h ****         {
1123:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1124:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1125:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1126:/usr/include/c++/5/bits/stl_vector.h **** 	}
1127:/usr/include/c++/5/bits/stl_vector.h **** #endif
1128:/usr/include/c++/5/bits/stl_vector.h **** 
1129:/usr/include/c++/5/bits/stl_vector.h ****       /**
1130:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1131:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1132:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1133:/usr/include/c++/5/bits/stl_vector.h ****        *
1134:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1135:/usr/include/c++/5/bits/stl_vector.h ****        *  shorten the %vector by one.
1136:/usr/include/c++/5/bits/stl_vector.h ****        *
1137:/usr/include/c++/5/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1138:/usr/include/c++/5/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1139:/usr/include/c++/5/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1140:/usr/include/c++/5/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1141:/usr/include/c++/5/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1142:/usr/include/c++/5/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1143:/usr/include/c++/5/bits/stl_vector.h ****        */
1144:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1145:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1146:/usr/include/c++/5/bits/stl_vector.h ****       erase(const_iterator __position)
1147:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1148:/usr/include/c++/5/bits/stl_vector.h **** #else
1149:/usr/include/c++/5/bits/stl_vector.h ****       erase(iterator __position)
1150:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(__position); }
1151:/usr/include/c++/5/bits/stl_vector.h **** #endif
1152:/usr/include/c++/5/bits/stl_vector.h **** 
1153:/usr/include/c++/5/bits/stl_vector.h ****       /**
1154:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1155:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1156:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1157:/usr/include/c++/5/bits/stl_vector.h ****        *                  erased.
1158:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1159:/usr/include/c++/5/bits/stl_vector.h ****        *           prior to erasing (or end()).
1160:/usr/include/c++/5/bits/stl_vector.h ****        *
1161:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will erase the elements in the range
1162:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1163:/usr/include/c++/5/bits/stl_vector.h ****        *
1164:/usr/include/c++/5/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1165:/usr/include/c++/5/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1166:/usr/include/c++/5/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1167:/usr/include/c++/5/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1168:/usr/include/c++/5/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1169:/usr/include/c++/5/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1170:/usr/include/c++/5/bits/stl_vector.h ****        */
1171:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1172:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1173:/usr/include/c++/5/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1174:/usr/include/c++/5/bits/stl_vector.h ****       {
1175:/usr/include/c++/5/bits/stl_vector.h **** 	const auto __beg = begin();
1176:/usr/include/c++/5/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1177:/usr/include/c++/5/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1178:/usr/include/c++/5/bits/stl_vector.h ****       }
1179:/usr/include/c++/5/bits/stl_vector.h **** #else
1180:/usr/include/c++/5/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1181:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1182:/usr/include/c++/5/bits/stl_vector.h **** #endif
1183:/usr/include/c++/5/bits/stl_vector.h **** 
1184:/usr/include/c++/5/bits/stl_vector.h ****       /**
1185:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1186:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1187:/usr/include/c++/5/bits/stl_vector.h ****        *
1188:/usr/include/c++/5/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1189:/usr/include/c++/5/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1190:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1191:/usr/include/c++/5/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1192:/usr/include/c++/5/bits/stl_vector.h ****        */
1193:/usr/include/c++/5/bits/stl_vector.h ****       void
1194:/usr/include/c++/5/bits/stl_vector.h ****       swap(vector& __x)
1195:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1196:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_nothrow_swap())
1197:/usr/include/c++/5/bits/stl_vector.h **** #endif
1198:/usr/include/c++/5/bits/stl_vector.h ****       {
1199:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1200:/usr/include/c++/5/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1201:/usr/include/c++/5/bits/stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1202:/usr/include/c++/5/bits/stl_vector.h ****       }
1203:/usr/include/c++/5/bits/stl_vector.h **** 
1204:/usr/include/c++/5/bits/stl_vector.h ****       /**
1205:/usr/include/c++/5/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1206:/usr/include/c++/5/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1207:/usr/include/c++/5/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1208:/usr/include/c++/5/bits/stl_vector.h ****        *  the user's responsibility.
1209:/usr/include/c++/5/bits/stl_vector.h ****        */
1210:/usr/include/c++/5/bits/stl_vector.h ****       void
1211:/usr/include/c++/5/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1212:/usr/include/c++/5/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1213:/usr/include/c++/5/bits/stl_vector.h **** 
1214:/usr/include/c++/5/bits/stl_vector.h ****     protected:
1215:/usr/include/c++/5/bits/stl_vector.h ****       /**
1216:/usr/include/c++/5/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1217:/usr/include/c++/5/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1218:/usr/include/c++/5/bits/stl_vector.h ****        */
1219:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1220:/usr/include/c++/5/bits/stl_vector.h ****         pointer
1221:/usr/include/c++/5/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1222:/usr/include/c++/5/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1223:/usr/include/c++/5/bits/stl_vector.h ****         {
1224:/usr/include/c++/5/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1225:/usr/include/c++/5/bits/stl_vector.h **** 	  __try
1226:/usr/include/c++/5/bits/stl_vector.h **** 	    {
1227:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1228:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1229:/usr/include/c++/5/bits/stl_vector.h **** 	      return __result;
1230:/usr/include/c++/5/bits/stl_vector.h **** 	    }
1231:/usr/include/c++/5/bits/stl_vector.h **** 	  __catch(...)
1232:/usr/include/c++/5/bits/stl_vector.h **** 	    {
1233:/usr/include/c++/5/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1234:/usr/include/c++/5/bits/stl_vector.h **** 	      __throw_exception_again;
1235:/usr/include/c++/5/bits/stl_vector.h **** 	    }
1236:/usr/include/c++/5/bits/stl_vector.h **** 	}
1237:/usr/include/c++/5/bits/stl_vector.h **** 
1238:/usr/include/c++/5/bits/stl_vector.h **** 
1239:/usr/include/c++/5/bits/stl_vector.h ****       // Internal constructor functions follow.
1240:/usr/include/c++/5/bits/stl_vector.h **** 
1241:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1242:/usr/include/c++/5/bits/stl_vector.h **** 
1243:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1244:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1245:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1246:/usr/include/c++/5/bits/stl_vector.h ****         void
1247:/usr/include/c++/5/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1248:/usr/include/c++/5/bits/stl_vector.h ****         {
1249:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1250:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1251:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1252:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1253:/usr/include/c++/5/bits/stl_vector.h **** 	}
1254:/usr/include/c++/5/bits/stl_vector.h **** 
1255:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1256:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1257:/usr/include/c++/5/bits/stl_vector.h ****         void
1258:/usr/include/c++/5/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1259:/usr/include/c++/5/bits/stl_vector.h **** 			       __false_type)
1260:/usr/include/c++/5/bits/stl_vector.h ****         {
1261:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1262:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1263:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1264:/usr/include/c++/5/bits/stl_vector.h **** 	}
1265:/usr/include/c++/5/bits/stl_vector.h **** 
1266:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1267:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1268:/usr/include/c++/5/bits/stl_vector.h ****         void
1269:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1270:/usr/include/c++/5/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1271:/usr/include/c++/5/bits/stl_vector.h ****         {
1272:/usr/include/c++/5/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1273:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1274:/usr/include/c++/5/bits/stl_vector.h **** 	    emplace_back(*__first);
1275:/usr/include/c++/5/bits/stl_vector.h **** #else
1276:/usr/include/c++/5/bits/stl_vector.h **** 	    push_back(*__first);
1277:/usr/include/c++/5/bits/stl_vector.h **** #endif
1278:/usr/include/c++/5/bits/stl_vector.h **** 	}
1279:/usr/include/c++/5/bits/stl_vector.h **** 
1280:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1281:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1282:/usr/include/c++/5/bits/stl_vector.h ****         void
1283:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1284:/usr/include/c++/5/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1285:/usr/include/c++/5/bits/stl_vector.h ****         {
1286:/usr/include/c++/5/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1287:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1288:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1289:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1290:/usr/include/c++/5/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1291:/usr/include/c++/5/bits/stl_vector.h **** 					this->_M_impl._M_start,
1292:/usr/include/c++/5/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1293:/usr/include/c++/5/bits/stl_vector.h **** 	}
1294:/usr/include/c++/5/bits/stl_vector.h **** 
1295:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1296:/usr/include/c++/5/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1297:/usr/include/c++/5/bits/stl_vector.h ****       void
1298:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1299:/usr/include/c++/5/bits/stl_vector.h ****       {
1300:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1301:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1302:/usr/include/c++/5/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1303:/usr/include/c++/5/bits/stl_vector.h ****       }
1304:/usr/include/c++/5/bits/stl_vector.h **** 
1305:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1306:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1307:/usr/include/c++/5/bits/stl_vector.h ****       void
1308:/usr/include/c++/5/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1309:/usr/include/c++/5/bits/stl_vector.h ****       {
1310:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1311:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1312:/usr/include/c++/5/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1313:/usr/include/c++/5/bits/stl_vector.h ****       }
1314:/usr/include/c++/5/bits/stl_vector.h **** #endif
1315:/usr/include/c++/5/bits/stl_vector.h **** 
1316:/usr/include/c++/5/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1317:/usr/include/c++/5/bits/stl_vector.h ****       // assignment work for the range versions.
1318:/usr/include/c++/5/bits/stl_vector.h **** 
1319:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1320:/usr/include/c++/5/bits/stl_vector.h **** 
1321:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1322:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1323:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1324:/usr/include/c++/5/bits/stl_vector.h ****         void
1325:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1326:/usr/include/c++/5/bits/stl_vector.h ****         { _M_fill_assign(__n, __val); }
1327:/usr/include/c++/5/bits/stl_vector.h **** 
1328:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1329:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1330:/usr/include/c++/5/bits/stl_vector.h ****         void
1331:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1332:/usr/include/c++/5/bits/stl_vector.h **** 			   __false_type)
1333:/usr/include/c++/5/bits/stl_vector.h ****         {
1334:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1335:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1336:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1337:/usr/include/c++/5/bits/stl_vector.h **** 	}
1338:/usr/include/c++/5/bits/stl_vector.h **** 
1339:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1340:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1341:/usr/include/c++/5/bits/stl_vector.h ****         void
1342:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1343:/usr/include/c++/5/bits/stl_vector.h **** 		      std::input_iterator_tag);
1344:/usr/include/c++/5/bits/stl_vector.h **** 
1345:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1346:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1347:/usr/include/c++/5/bits/stl_vector.h ****         void
1348:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1349:/usr/include/c++/5/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1350:/usr/include/c++/5/bits/stl_vector.h **** 
1351:/usr/include/c++/5/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1352:/usr/include/c++/5/bits/stl_vector.h ****       // to be the same thing.
1353:/usr/include/c++/5/bits/stl_vector.h ****       void
1354:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1355:/usr/include/c++/5/bits/stl_vector.h **** 
1356:/usr/include/c++/5/bits/stl_vector.h **** 
1357:/usr/include/c++/5/bits/stl_vector.h ****       // Internal insert functions follow.
1358:/usr/include/c++/5/bits/stl_vector.h **** 
1359:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1360:/usr/include/c++/5/bits/stl_vector.h **** 
1361:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1362:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1363:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1364:/usr/include/c++/5/bits/stl_vector.h ****         void
1365:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1366:/usr/include/c++/5/bits/stl_vector.h **** 			   __true_type)
1367:/usr/include/c++/5/bits/stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1368:/usr/include/c++/5/bits/stl_vector.h **** 
1369:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1370:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1371:/usr/include/c++/5/bits/stl_vector.h ****         void
1372:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1373:/usr/include/c++/5/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1374:/usr/include/c++/5/bits/stl_vector.h ****         {
1375:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1376:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1377:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1378:/usr/include/c++/5/bits/stl_vector.h **** 	}
1379:/usr/include/c++/5/bits/stl_vector.h **** 
1380:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1381:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1382:/usr/include/c++/5/bits/stl_vector.h ****         void
1383:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1384:/usr/include/c++/5/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1385:/usr/include/c++/5/bits/stl_vector.h **** 
1386:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1387:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1388:/usr/include/c++/5/bits/stl_vector.h ****         void
1389:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1390:/usr/include/c++/5/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1391:/usr/include/c++/5/bits/stl_vector.h **** 
1392:/usr/include/c++/5/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1393:/usr/include/c++/5/bits/stl_vector.h ****       // the same thing.
1394:/usr/include/c++/5/bits/stl_vector.h ****       void
1395:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1396:/usr/include/c++/5/bits/stl_vector.h **** 
1397:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1398:/usr/include/c++/5/bits/stl_vector.h ****       // Called by resize(n).
1399:/usr/include/c++/5/bits/stl_vector.h ****       void
1400:/usr/include/c++/5/bits/stl_vector.h ****       _M_default_append(size_type __n);
1401:/usr/include/c++/5/bits/stl_vector.h **** 
1402:/usr/include/c++/5/bits/stl_vector.h ****       bool
1403:/usr/include/c++/5/bits/stl_vector.h ****       _M_shrink_to_fit();
1404:/usr/include/c++/5/bits/stl_vector.h **** #endif
1405:/usr/include/c++/5/bits/stl_vector.h **** 
1406:/usr/include/c++/5/bits/stl_vector.h ****       // Called by insert(p,x)
1407:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus < 201103L
1408:/usr/include/c++/5/bits/stl_vector.h ****       void
1409:/usr/include/c++/5/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1410:/usr/include/c++/5/bits/stl_vector.h **** #else
1411:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
1412:/usr/include/c++/5/bits/stl_vector.h ****         void
1413:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1414:/usr/include/c++/5/bits/stl_vector.h **** 
1415:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
1416:/usr/include/c++/5/bits/stl_vector.h ****         void
1417:/usr/include/c++/5/bits/stl_vector.h ****         _M_emplace_back_aux(_Args&&... __args);
1418:/usr/include/c++/5/bits/stl_vector.h **** #endif
1419:/usr/include/c++/5/bits/stl_vector.h **** 
1420:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the latter.
1421:/usr/include/c++/5/bits/stl_vector.h ****       size_type
1422:/usr/include/c++/5/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1423:/usr/include/c++/5/bits/stl_vector.h ****       {
1424:/usr/include/c++/5/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1425:/usr/include/c++/5/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1426:/usr/include/c++/5/bits/stl_vector.h **** 
1427:/usr/include/c++/5/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 146              		.loc 4 1427 0
 147 0027 488D1400 		leaq	(%rax,%rax), %rdx
 148              	.LVL10:
1428:/usr/include/c++/5/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 149              		.loc 4 1428 0
 150 002b 4839D0   		cmpq	%rdx, %rax
 151 002e 0F868900 		jbe	.L25
 151      0000
 152              	.L13:
 153 0034 49C7C5F8 		movq	$-8, %r13
 153      FFFFFF
 154 003b EB09     		jmp	.L5
 155              	.LVL11:
 156 003d 0F1F00   		.p2align 4,,10
 157              		.p2align 3
 158              	.L12:
 159              	.LBB497:
 160              	.LBB496:
 161              		.loc 5 224 0
 162 0040 41BD0800 		movl	$8, %r13d
 162      0000
 163              	.LVL12:
 164              	.L5:
 165              	.LBE496:
 166              	.LBE497:
 167              	.LBE491:
 168              	.LBE490:
 169              	.LBB499:
 170              	.LBB500:
 171              	.LBB501:
 172              	.LBB502:
 173              	.LBB503:
 174              		.file 6 "/usr/include/c++/5/ext/new_allocator.h"
   1:/usr/include/c++/5/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/5/ext/new_allocator.h **** 
   3:/usr/include/c++/5/ext/new_allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/ext/new_allocator.h **** //
   5:/usr/include/c++/5/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/5/ext/new_allocator.h **** 
  11:/usr/include/c++/5/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/ext/new_allocator.h **** 
  16:/usr/include/c++/5/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/ext/new_allocator.h **** 
  20:/usr/include/c++/5/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/ext/new_allocator.h **** 
  25:/usr/include/c++/5/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/5/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/5/ext/new_allocator.h ****  */
  28:/usr/include/c++/5/ext/new_allocator.h **** 
  29:/usr/include/c++/5/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/5/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/5/ext/new_allocator.h **** 
  32:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/5/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/5/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/5/ext/new_allocator.h **** #endif
  39:/usr/include/c++/5/ext/new_allocator.h **** 
  40:/usr/include/c++/5/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/5/ext/new_allocator.h **** {
  42:/usr/include/c++/5/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/5/ext/new_allocator.h **** 
  44:/usr/include/c++/5/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/5/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/5/ext/new_allocator.h **** 
  47:/usr/include/c++/5/ext/new_allocator.h ****   /**
  48:/usr/include/c++/5/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/5/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/5/ext/new_allocator.h ****    *
  51:/usr/include/c++/5/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/5/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/5/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/5/ext/new_allocator.h ****    *
  55:/usr/include/c++/5/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/5/ext/new_allocator.h ****    */
  57:/usr/include/c++/5/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/5/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/5/ext/new_allocator.h ****     {
  60:/usr/include/c++/5/ext/new_allocator.h ****     public:
  61:/usr/include/c++/5/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/5/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/5/ext/new_allocator.h **** 
  69:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/5/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/5/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/5/ext/new_allocator.h **** 
  73:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/5/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/5/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/5/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/5/ext/new_allocator.h **** #endif
  78:/usr/include/c++/5/ext/new_allocator.h **** 
  79:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/5/ext/new_allocator.h **** 
  81:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/5/ext/new_allocator.h **** 
  83:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/5/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/5/ext/new_allocator.h **** 
  86:/usr/include/c++/5/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/5/ext/new_allocator.h **** 
  88:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/5/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/5/ext/new_allocator.h **** 
  92:/usr/include/c++/5/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/5/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/5/ext/new_allocator.h **** 
  96:/usr/include/c++/5/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/5/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/5/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/5/ext/new_allocator.h ****       { 
 101:/usr/include/c++/5/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/5/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/5/ext/new_allocator.h **** 
 104:/usr/include/c++/5/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 175              		.loc 6 104 0
 176 0046 4C89EF   		movq	%r13, %rdi
 177              	.LVL13:
 178 0049 E8000000 		call	_Znwm
 178      00
 179              	.LVL14:
 180 004e 498B5F08 		movq	8(%r15), %rbx
 181 0052 4889C5   		movq	%rax, %rbp
 182              	.LVL15:
 183              	.L11:
 184              	.LBE503:
 185              	.LBE502:
 186              	.LBE501:
 187              	.LBE500:
 188              	.LBE499:
 189              	.LBB505:
 190              	.LBB506:
 655:/usr/include/c++/5/bits/stl_vector.h **** 
 191              		.loc 4 655 0
 192 0055 4D8B27   		movq	(%r15), %r12
 193              	.LBE506:
 194              	.LBE505:
 195              	.LBB508:
 196              	.LBB509:
 197              	.LBB510:
 105:/usr/include/c++/5/ext/new_allocator.h ****       }
 106:/usr/include/c++/5/ext/new_allocator.h **** 
 107:/usr/include/c++/5/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/5/ext/new_allocator.h ****       void
 109:/usr/include/c++/5/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 110:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 111:/usr/include/c++/5/ext/new_allocator.h **** 
 112:/usr/include/c++/5/ext/new_allocator.h ****       size_type
 113:/usr/include/c++/5/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:/usr/include/c++/5/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:/usr/include/c++/5/ext/new_allocator.h **** 
 116:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 118:/usr/include/c++/5/ext/new_allocator.h ****         void
 119:/usr/include/c++/5/ext/new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:/usr/include/c++/5/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 198              		.loc 6 120 0
 199 0058 4889E8   		movq	%rbp, %rax
 200 005b 498B16   		movq	(%r14), %rdx
 201              	.LBE510:
 202              	.LBE509:
 203              	.LBE508:
 204              	.LBB513:
 205              	.LBB507:
 655:/usr/include/c++/5/bits/stl_vector.h **** 
 206              		.loc 4 655 0
 207 005e 4C29E3   		subq	%r12, %rbx
 208              	.LVL16:
 209              	.LBE507:
 210              	.LBE513:
 211              	.LBB514:
 212              	.LBB512:
 213              	.LBB511:
 214              		.loc 6 120 0
 215 0061 4801D8   		addq	%rbx, %rax
 216              	.LVL17:
 217 0064 7403     		je	.L7
 218 0066 488910   		movq	%rdx, (%rax)
 219              	.L7:
 220              	.LVL18:
 221              	.LBE511:
 222              	.LBE512:
 223              	.LBE514:
 224              	.LBB515:
 225              	.LBB516:
 226              	.LBB517:
 227              	.LBB518:
 228              	.LBB519:
 229              	.LBB520:
 230              	.LBB521:
 231              	.LBB522:
 232              	.LBB523:
 233              	.LBB524:
 234              	.LBB525:
 225:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 226:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 227:/usr/include/c++/5/bits/stl_algobase.h ****     }
 228:/usr/include/c++/5/bits/stl_algobase.h **** 
 229:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 230:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 231:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 232:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 233:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 234:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 235:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 236:/usr/include/c++/5/bits/stl_algobase.h ****    *
 237:/usr/include/c++/5/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 238:/usr/include/c++/5/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 239:/usr/include/c++/5/bits/stl_algobase.h ****   */
 240:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 241:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 242:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 243:/usr/include/c++/5/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 244:/usr/include/c++/5/bits/stl_algobase.h ****     {
 245:/usr/include/c++/5/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 246:/usr/include/c++/5/bits/stl_algobase.h ****       if (__comp(__b, __a))
 247:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 248:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 249:/usr/include/c++/5/bits/stl_algobase.h ****     }
 250:/usr/include/c++/5/bits/stl_algobase.h **** 
 251:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 252:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 253:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 254:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 255:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 256:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 257:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 258:/usr/include/c++/5/bits/stl_algobase.h ****    *
 259:/usr/include/c++/5/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 260:/usr/include/c++/5/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 261:/usr/include/c++/5/bits/stl_algobase.h ****   */
 262:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 263:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 264:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 265:/usr/include/c++/5/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 266:/usr/include/c++/5/bits/stl_algobase.h ****     {
 267:/usr/include/c++/5/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 268:/usr/include/c++/5/bits/stl_algobase.h ****       if (__comp(__a, __b))
 269:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 270:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 271:/usr/include/c++/5/bits/stl_algobase.h ****     }
 272:/usr/include/c++/5/bits/stl_algobase.h **** 
 273:/usr/include/c++/5/bits/stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 274:/usr/include/c++/5/bits/stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 275:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/5/bits/stl_algobase.h ****     struct _Niter_base
 277:/usr/include/c++/5/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 278:/usr/include/c++/5/bits/stl_algobase.h ****     { };
 279:/usr/include/c++/5/bits/stl_algobase.h **** 
 280:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Iterator>
 281:/usr/include/c++/5/bits/stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 282:/usr/include/c++/5/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 283:/usr/include/c++/5/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 284:/usr/include/c++/5/bits/stl_algobase.h **** 
 285:/usr/include/c++/5/bits/stl_algobase.h ****   // Likewise, for move_iterator.
 286:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Iterator>
 287:/usr/include/c++/5/bits/stl_algobase.h ****     struct _Miter_base
 288:/usr/include/c++/5/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 289:/usr/include/c++/5/bits/stl_algobase.h ****     { };
 290:/usr/include/c++/5/bits/stl_algobase.h **** 
 291:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Iterator>
 292:/usr/include/c++/5/bits/stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 293:/usr/include/c++/5/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 294:/usr/include/c++/5/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 295:/usr/include/c++/5/bits/stl_algobase.h **** 
 296:/usr/include/c++/5/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 297:/usr/include/c++/5/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 298:/usr/include/c++/5/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 299:/usr/include/c++/5/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 300:/usr/include/c++/5/bits/stl_algobase.h ****   // a for loop with an explicit count.
 301:/usr/include/c++/5/bits/stl_algobase.h **** 
 302:/usr/include/c++/5/bits/stl_algobase.h ****   template<bool, bool, typename>
 303:/usr/include/c++/5/bits/stl_algobase.h ****     struct __copy_move
 304:/usr/include/c++/5/bits/stl_algobase.h ****     {
 305:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 306:/usr/include/c++/5/bits/stl_algobase.h ****         static _OI
 307:/usr/include/c++/5/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 308:/usr/include/c++/5/bits/stl_algobase.h ****         {
 309:/usr/include/c++/5/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 310:/usr/include/c++/5/bits/stl_algobase.h **** 	    *__result = *__first;
 311:/usr/include/c++/5/bits/stl_algobase.h **** 	  return __result;
 312:/usr/include/c++/5/bits/stl_algobase.h **** 	}
 313:/usr/include/c++/5/bits/stl_algobase.h ****     };
 314:/usr/include/c++/5/bits/stl_algobase.h **** 
 315:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 316:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Category>
 317:/usr/include/c++/5/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 318:/usr/include/c++/5/bits/stl_algobase.h ****     {
 319:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 320:/usr/include/c++/5/bits/stl_algobase.h ****         static _OI
 321:/usr/include/c++/5/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 322:/usr/include/c++/5/bits/stl_algobase.h ****         {
 323:/usr/include/c++/5/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 324:/usr/include/c++/5/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 325:/usr/include/c++/5/bits/stl_algobase.h **** 	  return __result;
 326:/usr/include/c++/5/bits/stl_algobase.h **** 	}
 327:/usr/include/c++/5/bits/stl_algobase.h ****     };
 328:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 329:/usr/include/c++/5/bits/stl_algobase.h **** 
 330:/usr/include/c++/5/bits/stl_algobase.h ****   template<>
 331:/usr/include/c++/5/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 332:/usr/include/c++/5/bits/stl_algobase.h ****     {
 333:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 334:/usr/include/c++/5/bits/stl_algobase.h ****         static _OI
 335:/usr/include/c++/5/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 336:/usr/include/c++/5/bits/stl_algobase.h ****         { 
 337:/usr/include/c++/5/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 338:/usr/include/c++/5/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 339:/usr/include/c++/5/bits/stl_algobase.h **** 	    {
 340:/usr/include/c++/5/bits/stl_algobase.h **** 	      *__result = *__first;
 341:/usr/include/c++/5/bits/stl_algobase.h **** 	      ++__first;
 342:/usr/include/c++/5/bits/stl_algobase.h **** 	      ++__result;
 343:/usr/include/c++/5/bits/stl_algobase.h **** 	    }
 344:/usr/include/c++/5/bits/stl_algobase.h **** 	  return __result;
 345:/usr/include/c++/5/bits/stl_algobase.h **** 	}
 346:/usr/include/c++/5/bits/stl_algobase.h ****     };
 347:/usr/include/c++/5/bits/stl_algobase.h **** 
 348:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 349:/usr/include/c++/5/bits/stl_algobase.h ****   template<>
 350:/usr/include/c++/5/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 351:/usr/include/c++/5/bits/stl_algobase.h ****     {
 352:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 353:/usr/include/c++/5/bits/stl_algobase.h ****         static _OI
 354:/usr/include/c++/5/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 355:/usr/include/c++/5/bits/stl_algobase.h ****         { 
 356:/usr/include/c++/5/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 357:/usr/include/c++/5/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 358:/usr/include/c++/5/bits/stl_algobase.h **** 	    {
 359:/usr/include/c++/5/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 360:/usr/include/c++/5/bits/stl_algobase.h **** 	      ++__first;
 361:/usr/include/c++/5/bits/stl_algobase.h **** 	      ++__result;
 362:/usr/include/c++/5/bits/stl_algobase.h **** 	    }
 363:/usr/include/c++/5/bits/stl_algobase.h **** 	  return __result;
 364:/usr/include/c++/5/bits/stl_algobase.h **** 	}
 365:/usr/include/c++/5/bits/stl_algobase.h ****     };
 366:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 367:/usr/include/c++/5/bits/stl_algobase.h **** 
 368:/usr/include/c++/5/bits/stl_algobase.h ****   template<bool _IsMove>
 369:/usr/include/c++/5/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 370:/usr/include/c++/5/bits/stl_algobase.h ****     {
 371:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _Tp>
 372:/usr/include/c++/5/bits/stl_algobase.h ****         static _Tp*
 373:/usr/include/c++/5/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 374:/usr/include/c++/5/bits/stl_algobase.h ****         {
 375:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 376:/usr/include/c++/5/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 377:/usr/include/c++/5/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 378:/usr/include/c++/5/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 379:/usr/include/c++/5/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 380:/usr/include/c++/5/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 381:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 382:/usr/include/c++/5/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 383:/usr/include/c++/5/bits/stl_algobase.h **** 	  if (_Num)
 235              		.loc 5 383 0
 236 0069 4889D8   		movq	%rbx, %rax
 237 006c 48C1F803 		sarq	$3, %rax
 238 0070 4885C0   		testq	%rax, %rax
 239 0073 7533     		jne	.L26
 240              	.LVL19:
 241              	.LBE525:
 242              	.LBE524:
 243              	.LBE523:
 244              	.LBE522:
 245              	.LBE521:
 246              	.LBE520:
 247              	.LBE519:
 248              	.LBE518:
 249              	.LBE517:
 250              	.LBE516:
 251              	.LBE515:
 252              	.LBB536:
 253              	.LBB537:
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 254              		.loc 4 177 0
 255 0075 4D85E4   		testq	%r12, %r12
 256              	.LBE537:
 257              	.LBE536:
 408:/usr/include/c++/5/bits/vector.tcc ****       _M_emplace_back_aux(_Args&&... __args)
 409:/usr/include/c++/5/bits/vector.tcc ****       {
 410:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __len =
 411:/usr/include/c++/5/bits/vector.tcc **** 	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 412:/usr/include/c++/5/bits/vector.tcc **** 	pointer __new_start(this->_M_allocate(__len));
 413:/usr/include/c++/5/bits/vector.tcc **** 	pointer __new_finish(__new_start);
 414:/usr/include/c++/5/bits/vector.tcc **** 	__try
 415:/usr/include/c++/5/bits/vector.tcc **** 	  {
 416:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
 417:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 418:/usr/include/c++/5/bits/vector.tcc **** 	    __new_finish = pointer();
 419:/usr/include/c++/5/bits/vector.tcc **** 
 420:/usr/include/c++/5/bits/vector.tcc **** 	    __new_finish
 421:/usr/include/c++/5/bits/vector.tcc **** 	      = std::__uninitialized_move_if_noexcept_a
 422:/usr/include/c++/5/bits/vector.tcc **** 	      (this->_M_impl._M_start, this->_M_impl._M_finish,
 423:/usr/include/c++/5/bits/vector.tcc **** 	       __new_start, _M_get_Tp_allocator());
 424:/usr/include/c++/5/bits/vector.tcc **** 
 425:/usr/include/c++/5/bits/vector.tcc **** 	    ++__new_finish;
 258              		.loc 3 425 0
 259 0078 488D5C1D 		leaq	8(%rbp,%rbx), %rbx
 259      08
 260              	.LVL20:
 261              	.LBB542:
 262              	.LBB541:
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 263              		.loc 4 177 0
 264 007d 7408     		je	.L10
 265              	.LVL21:
 266              	.L9:
 267              	.LBB538:
 268              	.LBB539:
 269              	.LBB540:
 110:/usr/include/c++/5/ext/new_allocator.h **** 
 270              		.loc 6 110 0
 271 007f 4C89E7   		movq	%r12, %rdi
 272 0082 E8000000 		call	_ZdlPv
 272      00
 273              	.LVL22:
 274              	.L10:
 275              	.LBE540:
 276              	.LBE539:
 277              	.LBE538:
 278              	.LBE541:
 279              	.LBE542:
 426:/usr/include/c++/5/bits/vector.tcc **** 	  }
 427:/usr/include/c++/5/bits/vector.tcc **** 	__catch(...)
 428:/usr/include/c++/5/bits/vector.tcc **** 	  {
 429:/usr/include/c++/5/bits/vector.tcc **** 	    if (!__new_finish)
 430:/usr/include/c++/5/bits/vector.tcc **** 	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 431:/usr/include/c++/5/bits/vector.tcc **** 	    else
 432:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 433:/usr/include/c++/5/bits/vector.tcc **** 	    _M_deallocate(__new_start, __len);
 434:/usr/include/c++/5/bits/vector.tcc **** 	    __throw_exception_again;
 435:/usr/include/c++/5/bits/vector.tcc **** 	  }
 436:/usr/include/c++/5/bits/vector.tcc **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 437:/usr/include/c++/5/bits/vector.tcc **** 		      _M_get_Tp_allocator());
 438:/usr/include/c++/5/bits/vector.tcc **** 	_M_deallocate(this->_M_impl._M_start,
 439:/usr/include/c++/5/bits/vector.tcc **** 		      this->_M_impl._M_end_of_storage
 440:/usr/include/c++/5/bits/vector.tcc **** 		      - this->_M_impl._M_start);
 441:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_start = __new_start;
 280              		.loc 3 441 0
 281 0087 49892F   		movq	%rbp, (%r15)
 442:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_finish = __new_finish;
 443:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_end_of_storage = __new_start + __len;
 282              		.loc 3 443 0
 283 008a 4C01ED   		addq	%r13, %rbp
 442:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_finish = __new_finish;
 284              		.loc 3 442 0
 285 008d 49895F08 		movq	%rbx, 8(%r15)
 286              		.loc 3 443 0
 287 0091 49896F10 		movq	%rbp, 16(%r15)
 444:/usr/include/c++/5/bits/vector.tcc ****       }
 288              		.loc 3 444 0
 289 0095 4883C408 		addq	$8, %rsp
 290              		.cfi_remember_state
 291              		.cfi_def_cfa_offset 56
 292 0099 5B       		popq	%rbx
 293              		.cfi_def_cfa_offset 48
 294              	.LVL23:
 295 009a 5D       		popq	%rbp
 296              		.cfi_def_cfa_offset 40
 297 009b 415C     		popq	%r12
 298              		.cfi_def_cfa_offset 32
 299              	.LVL24:
 300 009d 415D     		popq	%r13
 301              		.cfi_def_cfa_offset 24
 302 009f 415E     		popq	%r14
 303              		.cfi_def_cfa_offset 16
 304              	.LVL25:
 305 00a1 415F     		popq	%r15
 306              		.cfi_def_cfa_offset 8
 307              	.LVL26:
 308 00a3 C3       		ret
 309              	.LVL27:
 310              		.p2align 4,,10
 311 00a4 0F1F4000 		.p2align 3
 312              	.L26:
 313              		.cfi_restore_state
 314              	.LBB543:
 315              	.LBB535:
 316              	.LBB534:
 317              	.LBB533:
 318              	.LBB532:
 319              	.LBB531:
 320              	.LBB530:
 321              	.LBB529:
 322              	.LBB528:
 323              	.LBB527:
 324              	.LBB526:
 384:/usr/include/c++/5/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 325              		.loc 5 384 0
 326 00a8 4889DA   		movq	%rbx, %rdx
 327 00ab 4C89E6   		movq	%r12, %rsi
 328 00ae 4889EF   		movq	%rbp, %rdi
 329 00b1 E8000000 		call	memmove
 329      00
 330              	.LVL28:
 331              	.LBE526:
 332              	.LBE527:
 333              	.LBE528:
 334              	.LBE529:
 335              	.LBE530:
 336              	.LBE531:
 337              	.LBE532:
 338              	.LBE533:
 339              	.LBE534:
 340              	.LBE535:
 341              	.LBE543:
 425:/usr/include/c++/5/bits/vector.tcc **** 	  }
 342              		.loc 3 425 0
 343 00b6 488D5C1D 		leaq	8(%rbp,%rbx), %rbx
 343      08
 344              	.LVL29:
 345 00bb EBC2     		jmp	.L9
 346              	.LVL30:
 347              	.L25:
 348              	.LBB544:
 349              	.LBB498:
 350              		.loc 4 1428 0
 351 00bd 48B9FFFF 		movabsq	$2305843009213693951, %rcx
 351      FFFFFFFF 
 351      FF1F
 352 00c7 4839CA   		cmpq	%rcx, %rdx
 353 00ca 0F8764FF 		ja	.L13
 353      FFFF
 354              	.LVL31:
 355              	.LBE498:
 356              	.LBE544:
 357              	.LBB545:
 358              	.LBB504:
 170:/usr/include/c++/5/bits/stl_vector.h ****       }
 359              		.loc 4 170 0
 360 00d0 4531ED   		xorl	%r13d, %r13d
 361 00d3 31ED     		xorl	%ebp, %ebp
 362 00d5 4885D2   		testq	%rdx, %rdx
 363 00d8 0F8477FF 		je	.L11
 363      FFFF
 364 00de 48C1E004 		salq	$4, %rax
 365 00e2 4989C5   		movq	%rax, %r13
 366 00e5 E95CFFFF 		jmp	.L5
 366      FF
 367              	.LBE504:
 368              	.LBE545:
 369              		.cfi_endproc
 370              	.LFE1476:
 372              		.section	.text.unlikely._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,"axG",
 373              	.LCOLDE4:
 374              		.section	.text._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,"axG",@progbits
 375              	.LHOTE4:
 376              		.weak	_ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_
 377              		.set	_ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_,_ZNSt6vectorIP7MyClassSaI
 378              		.section	.rodata.str1.8,"aMS",@progbits,1
 379              		.align 8
 380              	.LC5:
 381 0000 0A4D616B 		.string	"\nMakeplate linux C++ example.\n\n\n"
 381      65706C61 
 381      7465206C 
 381      696E7578 
 381      20432B2B 
 382              		.section	.rodata.str1.1
 383              	.LC6:
 384 001a 446F2025 		.string	"Do %d\n"
 384      640A00
 385              		.section	.text.unlikely
 386              	.LCOLDB7:
 387              		.section	.text.startup,"ax",@progbits
 388              	.LHOTB7:
 389              		.p2align 4,,15
 390              		.globl	main
 392              	main:
 393              	.LFB1353:
  68:src/main.cpp  ****     UNUSED(sig);
  69:src/main.cpp  ****     printf("Sighup\n");
  70:src/main.cpp  **** }
  71:src/main.cpp  **** 
  72:src/main.cpp  **** 
  73:src/main.cpp  **** int main(int argc, char *argv[]) {
 394              		.loc 1 73 0
 395              		.cfi_startproc
 396              	.LVL32:
 397 0000 55       		pushq	%rbp
 398              		.cfi_def_cfa_offset 16
 399              		.cfi_offset 6, -16
 400 0001 53       		pushq	%rbx
 401              		.cfi_def_cfa_offset 24
 402              		.cfi_offset 3, -24
 403 0002 4883EC68 		subq	$104, %rsp
 404              		.cfi_def_cfa_offset 128
  74:src/main.cpp  ****     int i;
  75:src/main.cpp  ****     MyClass a, *b;
 405              		.loc 1 75 0
 406 0006 4889E7   		movq	%rsp, %rdi
 407              	.LVL33:
  73:src/main.cpp  ****     int i;
 408              		.loc 1 73 0
 409 0009 64488B04 		movq	%fs:40, %rax
 409      25280000 
 409      00
 410 0012 48894424 		movq	%rax, 88(%rsp)
 410      58
 411 0017 31C0     		xorl	%eax, %eax
 412              		.loc 1 75 0
 413 0019 E8000000 		call	_ZN7MyClassC1Ev
 413      00
 414              	.LVL34:
 415              	.LBB613:
 416              	.LBB614:
 417              	.LBB615:
 418              		.file 7 "/usr/include/c++/5/bits/basic_string.h"
   1:/usr/include/c++/5/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/5/bits/basic_string.h **** 
   3:/usr/include/c++/5/bits/basic_string.h **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/basic_string.h **** //
   5:/usr/include/c++/5/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/5/bits/basic_string.h **** 
  11:/usr/include/c++/5/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/basic_string.h **** 
  16:/usr/include/c++/5/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/basic_string.h **** 
  20:/usr/include/c++/5/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/basic_string.h **** 
  25:/usr/include/c++/5/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/5/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/5/bits/basic_string.h ****  */
  29:/usr/include/c++/5/bits/basic_string.h **** 
  30:/usr/include/c++/5/bits/basic_string.h **** //
  31:/usr/include/c++/5/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/5/bits/basic_string.h **** //
  33:/usr/include/c++/5/bits/basic_string.h **** 
  34:/usr/include/c++/5/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/5/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/5/bits/basic_string.h **** 
  37:/usr/include/c++/5/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/5/bits/basic_string.h **** 
  39:/usr/include/c++/5/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/5/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/5/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
  43:/usr/include/c++/5/bits/basic_string.h **** #include <initializer_list>
  44:/usr/include/c++/5/bits/basic_string.h **** #endif
  45:/usr/include/c++/5/bits/basic_string.h **** 
  46:/usr/include/c++/5/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/5/bits/basic_string.h **** {
  48:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/5/bits/basic_string.h **** 
  50:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  52:/usr/include/c++/5/bits/basic_string.h ****   /**
  53:/usr/include/c++/5/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  54:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  55:/usr/include/c++/5/bits/basic_string.h ****    *
  56:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup strings
  57:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup sequences
  58:/usr/include/c++/5/bits/basic_string.h ****    *
  59:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  60:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/5/bits/basic_string.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  63:/usr/include/c++/5/bits/basic_string.h ****    *
  64:/usr/include/c++/5/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  65:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  66:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  67:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  68:/usr/include/c++/5/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  69:/usr/include/c++/5/bits/basic_string.h ****    */
  70:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  71:/usr/include/c++/5/bits/basic_string.h ****     class basic_string
  72:/usr/include/c++/5/bits/basic_string.h ****     {
  73:/usr/include/c++/5/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  74:/usr/include/c++/5/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  75:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  76:/usr/include/c++/5/bits/basic_string.h **** 
  77:/usr/include/c++/5/bits/basic_string.h ****       // Types:
  78:/usr/include/c++/5/bits/basic_string.h ****     public:
  79:/usr/include/c++/5/bits/basic_string.h ****       typedef _Traits					traits_type;
  80:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  81:/usr/include/c++/5/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  82:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  83:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  84:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  85:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  86:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  87:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  88:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  89:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  90:/usr/include/c++/5/bits/basic_string.h **** 							const_iterator;
  91:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  92:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  93:/usr/include/c++/5/bits/basic_string.h **** 
  94:/usr/include/c++/5/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
  95:/usr/include/c++/5/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
  96:/usr/include/c++/5/bits/basic_string.h **** 
  97:/usr/include/c++/5/bits/basic_string.h ****     private:
  98:/usr/include/c++/5/bits/basic_string.h ****       // type used for positions in insert, erase etc.
  99:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus < 201103L
 100:/usr/include/c++/5/bits/basic_string.h ****       typedef iterator __const_iterator;
 101:/usr/include/c++/5/bits/basic_string.h **** #else
 102:/usr/include/c++/5/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 103:/usr/include/c++/5/bits/basic_string.h **** #endif
 104:/usr/include/c++/5/bits/basic_string.h **** 
 105:/usr/include/c++/5/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 106:/usr/include/c++/5/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 107:/usr/include/c++/5/bits/basic_string.h ****       {
 108:/usr/include/c++/5/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 109:/usr/include/c++/5/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 419              		.loc 7 109 0
 420 001e 488D4424 		leaq	64(%rsp), %rax
 420      40
 421              	.LBE615:
 422              	.LBE614:
 423              	.LBE613:
  76:src/main.cpp  ****     vector<MyClass *> mcList;
  77:src/main.cpp  ****     string str;
  78:src/main.cpp  ****     Kalle *k;
  79:src/main.cpp  **** 
  80:src/main.cpp  ****     UNUSED(argc);
  81:src/main.cpp  ****     UNUSED(argv);
  82:src/main.cpp  **** 
  83:src/main.cpp  ****     signal(SIGINT, sigInt);
 424              		.loc 1 83 0
 425 0023 BE000000 		movl	$_Z6sigInti, %esi
 425      00
 426 0028 BF020000 		movl	$2, %edi
 426      00
 427              	.LBB623:
 428              	.LBB624:
 429              	.LBB625:
 430              	.LBB626:
  87:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
 431              		.loc 4 87 0
 432 002d 48C74424 		movq	$0, 16(%rsp)
 432      10000000 
 432      00
 433 0036 48C74424 		movq	$0, 24(%rsp)
 433      18000000 
 433      00
 434 003f 48C74424 		movq	$0, 32(%rsp)
 434      20000000 
 434      00
 435              	.LVL35:
 436              	.LBE626:
 437              	.LBE625:
 438              	.LBE624:
 439              	.LBE623:
 440              	.LBB627:
 441              	.LBB617:
 442              	.LBB616:
 443              		.loc 7 109 0
 444 0048 48894424 		movq	%rax, 48(%rsp)
 444      30
 445              	.LVL36:
 446              	.LBE616:
 447              	.LBE617:
 448              	.LBB618:
 449              	.LBB619:
 450              	.LBB620:
 110:/usr/include/c++/5/bits/basic_string.h **** 
 111:/usr/include/c++/5/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 112:/usr/include/c++/5/bits/basic_string.h ****       };
 113:/usr/include/c++/5/bits/basic_string.h **** 
 114:/usr/include/c++/5/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 115:/usr/include/c++/5/bits/basic_string.h ****       size_type		_M_string_length;
 116:/usr/include/c++/5/bits/basic_string.h **** 
 117:/usr/include/c++/5/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 118:/usr/include/c++/5/bits/basic_string.h **** 
 119:/usr/include/c++/5/bits/basic_string.h ****       union
 120:/usr/include/c++/5/bits/basic_string.h ****       {
 121:/usr/include/c++/5/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 122:/usr/include/c++/5/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 123:/usr/include/c++/5/bits/basic_string.h ****       };
 124:/usr/include/c++/5/bits/basic_string.h **** 
 125:/usr/include/c++/5/bits/basic_string.h ****       void
 126:/usr/include/c++/5/bits/basic_string.h ****       _M_data(pointer __p)
 127:/usr/include/c++/5/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 128:/usr/include/c++/5/bits/basic_string.h **** 
 129:/usr/include/c++/5/bits/basic_string.h ****       void
 130:/usr/include/c++/5/bits/basic_string.h ****       _M_length(size_type __length)
 131:/usr/include/c++/5/bits/basic_string.h ****       { _M_string_length = __length; }
 451              		.loc 7 131 0
 452 004d 48C74424 		movq	$0, 56(%rsp)
 452      38000000 
 452      00
 453              	.LVL37:
 454              	.LBE620:
 455              	.LBE619:
 456              	.LBB621:
 457              	.LBB622:
 458              		.file 8 "/usr/include/c++/5/bits/char_traits.h"
   1:/usr/include/c++/5/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/5/bits/char_traits.h **** 
   3:/usr/include/c++/5/bits/char_traits.h **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/char_traits.h **** //
   5:/usr/include/c++/5/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/5/bits/char_traits.h **** 
  11:/usr/include/c++/5/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/char_traits.h **** 
  16:/usr/include/c++/5/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/char_traits.h **** 
  20:/usr/include/c++/5/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/char_traits.h **** 
  25:/usr/include/c++/5/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/5/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/5/bits/char_traits.h ****  */
  29:/usr/include/c++/5/bits/char_traits.h **** 
  30:/usr/include/c++/5/bits/char_traits.h **** //
  31:/usr/include/c++/5/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/5/bits/char_traits.h **** //
  33:/usr/include/c++/5/bits/char_traits.h **** 
  34:/usr/include/c++/5/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/5/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/5/bits/char_traits.h **** 
  37:/usr/include/c++/5/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/5/bits/char_traits.h **** 
  39:/usr/include/c++/5/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/5/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/5/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/5/bits/char_traits.h **** 
  43:/usr/include/c++/5/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/5/bits/char_traits.h **** {
  45:/usr/include/c++/5/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/5/bits/char_traits.h **** 
  47:/usr/include/c++/5/bits/char_traits.h ****   /**
  48:/usr/include/c++/5/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  49:/usr/include/c++/5/bits/char_traits.h ****    *
  50:/usr/include/c++/5/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  51:/usr/include/c++/5/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  52:/usr/include/c++/5/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  53:/usr/include/c++/5/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  54:/usr/include/c++/5/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  55:/usr/include/c++/5/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  56:/usr/include/c++/5/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  57:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
  58:/usr/include/c++/5/bits/char_traits.h ****     struct _Char_types
  59:/usr/include/c++/5/bits/char_traits.h ****     {
  60:/usr/include/c++/5/bits/char_traits.h ****       typedef unsigned long   int_type;
  61:/usr/include/c++/5/bits/char_traits.h ****       typedef std::streampos  pos_type;
  62:/usr/include/c++/5/bits/char_traits.h ****       typedef std::streamoff  off_type;
  63:/usr/include/c++/5/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  64:/usr/include/c++/5/bits/char_traits.h ****     };
  65:/usr/include/c++/5/bits/char_traits.h **** 
  66:/usr/include/c++/5/bits/char_traits.h **** 
  67:/usr/include/c++/5/bits/char_traits.h ****   /**
  68:/usr/include/c++/5/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  69:/usr/include/c++/5/bits/char_traits.h ****    *
  70:/usr/include/c++/5/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  71:/usr/include/c++/5/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  72:/usr/include/c++/5/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  73:/usr/include/c++/5/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  74:/usr/include/c++/5/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  75:/usr/include/c++/5/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  76:/usr/include/c++/5/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  77:/usr/include/c++/5/bits/char_traits.h ****    *
  78:/usr/include/c++/5/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  79:/usr/include/c++/5/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  80:/usr/include/c++/5/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  81:/usr/include/c++/5/bits/char_traits.h ****    */
  82:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
  83:/usr/include/c++/5/bits/char_traits.h ****     struct char_traits
  84:/usr/include/c++/5/bits/char_traits.h ****     {
  85:/usr/include/c++/5/bits/char_traits.h ****       typedef _CharT                                    char_type;
  86:/usr/include/c++/5/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  87:/usr/include/c++/5/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  88:/usr/include/c++/5/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  89:/usr/include/c++/5/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  90:/usr/include/c++/5/bits/char_traits.h **** 
  91:/usr/include/c++/5/bits/char_traits.h ****       static void
  92:/usr/include/c++/5/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  93:/usr/include/c++/5/bits/char_traits.h ****       { __c1 = __c2; }
  94:/usr/include/c++/5/bits/char_traits.h **** 
  95:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
  96:/usr/include/c++/5/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
  97:/usr/include/c++/5/bits/char_traits.h ****       { return __c1 == __c2; }
  98:/usr/include/c++/5/bits/char_traits.h **** 
  99:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/usr/include/c++/5/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 101:/usr/include/c++/5/bits/char_traits.h ****       { return __c1 < __c2; }
 102:/usr/include/c++/5/bits/char_traits.h **** 
 103:/usr/include/c++/5/bits/char_traits.h ****       static int
 104:/usr/include/c++/5/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 105:/usr/include/c++/5/bits/char_traits.h **** 
 106:/usr/include/c++/5/bits/char_traits.h ****       static std::size_t
 107:/usr/include/c++/5/bits/char_traits.h ****       length(const char_type* __s);
 108:/usr/include/c++/5/bits/char_traits.h **** 
 109:/usr/include/c++/5/bits/char_traits.h ****       static const char_type*
 110:/usr/include/c++/5/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 111:/usr/include/c++/5/bits/char_traits.h **** 
 112:/usr/include/c++/5/bits/char_traits.h ****       static char_type*
 113:/usr/include/c++/5/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 114:/usr/include/c++/5/bits/char_traits.h **** 
 115:/usr/include/c++/5/bits/char_traits.h ****       static char_type*
 116:/usr/include/c++/5/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 117:/usr/include/c++/5/bits/char_traits.h **** 
 118:/usr/include/c++/5/bits/char_traits.h ****       static char_type*
 119:/usr/include/c++/5/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 120:/usr/include/c++/5/bits/char_traits.h **** 
 121:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 122:/usr/include/c++/5/bits/char_traits.h ****       to_char_type(const int_type& __c)
 123:/usr/include/c++/5/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 124:/usr/include/c++/5/bits/char_traits.h **** 
 125:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 126:/usr/include/c++/5/bits/char_traits.h ****       to_int_type(const char_type& __c)
 127:/usr/include/c++/5/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 128:/usr/include/c++/5/bits/char_traits.h **** 
 129:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 130:/usr/include/c++/5/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 131:/usr/include/c++/5/bits/char_traits.h ****       { return __c1 == __c2; }
 132:/usr/include/c++/5/bits/char_traits.h **** 
 133:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 134:/usr/include/c++/5/bits/char_traits.h ****       eof()
 135:/usr/include/c++/5/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 136:/usr/include/c++/5/bits/char_traits.h **** 
 137:/usr/include/c++/5/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/c++/5/bits/char_traits.h ****       not_eof(const int_type& __c)
 139:/usr/include/c++/5/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 140:/usr/include/c++/5/bits/char_traits.h ****     };
 141:/usr/include/c++/5/bits/char_traits.h **** 
 142:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 143:/usr/include/c++/5/bits/char_traits.h ****     int
 144:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 145:/usr/include/c++/5/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 146:/usr/include/c++/5/bits/char_traits.h ****     {
 147:/usr/include/c++/5/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 148:/usr/include/c++/5/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 149:/usr/include/c++/5/bits/char_traits.h **** 	  return -1;
 150:/usr/include/c++/5/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 151:/usr/include/c++/5/bits/char_traits.h **** 	  return 1;
 152:/usr/include/c++/5/bits/char_traits.h ****       return 0;
 153:/usr/include/c++/5/bits/char_traits.h ****     }
 154:/usr/include/c++/5/bits/char_traits.h **** 
 155:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 156:/usr/include/c++/5/bits/char_traits.h ****     std::size_t
 157:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 158:/usr/include/c++/5/bits/char_traits.h ****     length(const char_type* __p)
 159:/usr/include/c++/5/bits/char_traits.h ****     {
 160:/usr/include/c++/5/bits/char_traits.h ****       std::size_t __i = 0;
 161:/usr/include/c++/5/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 162:/usr/include/c++/5/bits/char_traits.h ****         ++__i;
 163:/usr/include/c++/5/bits/char_traits.h ****       return __i;
 164:/usr/include/c++/5/bits/char_traits.h ****     }
 165:/usr/include/c++/5/bits/char_traits.h **** 
 166:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 167:/usr/include/c++/5/bits/char_traits.h ****     const typename char_traits<_CharT>::char_type*
 168:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 169:/usr/include/c++/5/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 170:/usr/include/c++/5/bits/char_traits.h ****     {
 171:/usr/include/c++/5/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 172:/usr/include/c++/5/bits/char_traits.h ****         if (eq(__s[__i], __a))
 173:/usr/include/c++/5/bits/char_traits.h ****           return __s + __i;
 174:/usr/include/c++/5/bits/char_traits.h ****       return 0;
 175:/usr/include/c++/5/bits/char_traits.h ****     }
 176:/usr/include/c++/5/bits/char_traits.h **** 
 177:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 178:/usr/include/c++/5/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 179:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 180:/usr/include/c++/5/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 181:/usr/include/c++/5/bits/char_traits.h ****     {
 182:/usr/include/c++/5/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 183:/usr/include/c++/5/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 184:/usr/include/c++/5/bits/char_traits.h ****     }
 185:/usr/include/c++/5/bits/char_traits.h **** 
 186:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 187:/usr/include/c++/5/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 188:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 189:/usr/include/c++/5/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 190:/usr/include/c++/5/bits/char_traits.h ****     {
 191:/usr/include/c++/5/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 192:/usr/include/c++/5/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 193:/usr/include/c++/5/bits/char_traits.h ****       return __s1;
 194:/usr/include/c++/5/bits/char_traits.h ****     }
 195:/usr/include/c++/5/bits/char_traits.h **** 
 196:/usr/include/c++/5/bits/char_traits.h ****   template<typename _CharT>
 197:/usr/include/c++/5/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 198:/usr/include/c++/5/bits/char_traits.h ****     char_traits<_CharT>::
 199:/usr/include/c++/5/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 200:/usr/include/c++/5/bits/char_traits.h ****     {
 201:/usr/include/c++/5/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 202:/usr/include/c++/5/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 203:/usr/include/c++/5/bits/char_traits.h ****       return __s;
 204:/usr/include/c++/5/bits/char_traits.h ****     }
 205:/usr/include/c++/5/bits/char_traits.h **** 
 206:/usr/include/c++/5/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 207:/usr/include/c++/5/bits/char_traits.h **** } // namespace
 208:/usr/include/c++/5/bits/char_traits.h **** 
 209:/usr/include/c++/5/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 210:/usr/include/c++/5/bits/char_traits.h **** {
 211:/usr/include/c++/5/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 212:/usr/include/c++/5/bits/char_traits.h **** 
 213:/usr/include/c++/5/bits/char_traits.h ****   // 21.1
 214:/usr/include/c++/5/bits/char_traits.h ****   /**
 215:/usr/include/c++/5/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 216:/usr/include/c++/5/bits/char_traits.h ****    *
 217:/usr/include/c++/5/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 218:/usr/include/c++/5/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 219:/usr/include/c++/5/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 220:/usr/include/c++/5/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 221:/usr/include/c++/5/bits/char_traits.h ****    *
 222:/usr/include/c++/5/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 223:/usr/include/c++/5/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 224:/usr/include/c++/5/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 225:/usr/include/c++/5/bits/char_traits.h ****   */
 226:/usr/include/c++/5/bits/char_traits.h ****   template<class _CharT>
 227:/usr/include/c++/5/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 228:/usr/include/c++/5/bits/char_traits.h ****     { };
 229:/usr/include/c++/5/bits/char_traits.h **** 
 230:/usr/include/c++/5/bits/char_traits.h **** 
 231:/usr/include/c++/5/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 232:/usr/include/c++/5/bits/char_traits.h ****   template<>
 233:/usr/include/c++/5/bits/char_traits.h ****     struct char_traits<char>
 234:/usr/include/c++/5/bits/char_traits.h ****     {
 235:/usr/include/c++/5/bits/char_traits.h ****       typedef char              char_type;
 236:/usr/include/c++/5/bits/char_traits.h ****       typedef int               int_type;
 237:/usr/include/c++/5/bits/char_traits.h ****       typedef streampos         pos_type;
 238:/usr/include/c++/5/bits/char_traits.h ****       typedef streamoff         off_type;
 239:/usr/include/c++/5/bits/char_traits.h ****       typedef mbstate_t         state_type;
 240:/usr/include/c++/5/bits/char_traits.h **** 
 241:/usr/include/c++/5/bits/char_traits.h ****       static void
 242:/usr/include/c++/5/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 243:/usr/include/c++/5/bits/char_traits.h ****       { __c1 = __c2; }
 459              		.loc 8 243 0
 460 0056 C6442440 		movb	$0, 64(%rsp)
 460      00
 461              	.LVL38:
 462              	.LBE622:
 463              	.LBE621:
 464              	.LBE618:
 465              	.LBE627:
 466              		.loc 1 83 0
 467 005b E8000000 		call	signal
 467      00
 468              	.LVL39:
  84:src/main.cpp  ****     signal(SIGHUP, sigHup);
 469              		.loc 1 84 0
 470 0060 BE000000 		movl	$_Z6sigHupi, %esi
 470      00
 471 0065 BF010000 		movl	$1, %edi
 471      00
 472 006a E8000000 		call	signal
 472      00
 473              	.LVL40:
 474              	.LBB628:
 475              	.LBB629:
 476              		.loc 2 104 0
 477 006f BE000000 		movl	$.LC5, %esi
 477      00
 478 0074 BF010000 		movl	$1, %edi
 478      00
 479 0079 31C0     		xorl	%eax, %eax
 480 007b E8000000 		call	__printf_chk
 480      00
 481              	.LVL41:
 482              	.LBE629:
 483              	.LBE628:
  85:src/main.cpp  **** 
  86:src/main.cpp  ****     printf("\nMakeplate linux C++ example.\n\n\n");
  87:src/main.cpp  **** 
  88:src/main.cpp  ****     a.Do(1);
 484              		.loc 1 88 0
 485 0080 BE010000 		movl	$1, %esi
 485      00
 486 0085 4889E7   		movq	%rsp, %rdi
 487 0088 E8000000 		call	_ZN7MyClass2DoEi
 487      00
 488              	.LVL42:
  89:src/main.cpp  **** 
  90:src/main.cpp  ****     b = new MyClass;
 489              		.loc 1 90 0
 490 008d BF080000 		movl	$8, %edi
 490      00
 491 0092 E8000000 		call	_Znwm
 491      00
 492              	.LVL43:
 493 0097 4889C3   		movq	%rax, %rbx
 494 009a 4889C7   		movq	%rax, %rdi
 495 009d E8000000 		call	_ZN7MyClassC1Ev
 495      00
 496              	.LVL44:
 497 00a2 48895C24 		movq	%rbx, 8(%rsp)
 497      08
  91:src/main.cpp  **** 
  92:src/main.cpp  ****     b->Do(10);
 498              		.loc 1 92 0
 499 00a7 4889DF   		movq	%rbx, %rdi
 500 00aa BE0A0000 		movl	$10, %esi
 500      00
  93:src/main.cpp  **** 
  94:src/main.cpp  ****     for (i = 0; i < 10; i++) {
 501              		.loc 1 94 0
 502 00af 31DB     		xorl	%ebx, %ebx
  92:src/main.cpp  **** 
 503              		.loc 1 92 0
 504 00b1 E8000000 		call	_ZN7MyClass2DoEi
 504      00
 505              	.LVL45:
 506 00b6 662E0F1F 		.p2align 4,,10
 506      84000000 
 506      0000
 507              		.p2align 3
 508              	.L31:
  95:src/main.cpp  ****         b = new MyClass(i);
 509              		.loc 1 95 0 discriminator 2
 510 00c0 BF080000 		movl	$8, %edi
 510      00
 511 00c5 E8000000 		call	_Znwm
 511      00
 512              	.LVL46:
 513 00ca 89DE     		movl	%ebx, %esi
 514 00cc 4889C7   		movq	%rax, %rdi
 515 00cf 4889C5   		movq	%rax, %rbp
 516 00d2 E8000000 		call	_ZN7MyClassC1Ei
 516      00
 517              	.LVL47:
 518              	.LBB630:
 519              	.LBB631:
 915:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 520              		.loc 4 915 0 discriminator 2
 521 00d7 488B5424 		movq	24(%rsp), %rdx
 521      18
 522 00dc 483B5424 		cmpq	32(%rsp), %rdx
 522      20
 523              	.LBE631:
 524              	.LBE630:
 525              		.loc 1 95 0 discriminator 2
 526 00e1 48896C24 		movq	%rbp, 8(%rsp)
 526      08
 527              	.LVL48:
 528              	.LBB637:
 529              	.LBB635:
 915:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 530              		.loc 4 915 0 discriminator 2
 531 00e6 0F84C400 		je	.L28
 531      0000
 532              	.LVL49:
 533              	.LBB632:
 534              	.LBB633:
 535              	.LBB634:
 536              		.loc 6 120 0
 537 00ec 4885D2   		testq	%rdx, %rdx
 538 00ef 7408     		je	.L29
 539 00f1 48892A   		movq	%rbp, (%rdx)
 540 00f4 488B5424 		movq	24(%rsp), %rdx
 540      18
 541              	.LVL50:
 542              	.L29:
 543              	.LBE634:
 544              	.LBE633:
 545              	.LBE632:
 919:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 546              		.loc 4 919 0
 547 00f9 4883C208 		addq	$8, %rdx
 548 00fd 48895424 		movq	%rdx, 24(%rsp)
 548      18
 549              	.LVL51:
 550              	.L30:
 551              	.LBE635:
 552              	.LBE637:
  94:src/main.cpp  ****         b = new MyClass(i);
 553              		.loc 1 94 0 discriminator 2
 554 0102 83C301   		addl	$1, %ebx
 555              	.LVL52:
 556 0105 83FB0A   		cmpl	$10, %ebx
 557 0108 75B6     		jne	.L31
 558              	.LVL53:
 559              	.LBB638:
 560              	.LBB639:
 655:/usr/include/c++/5/bits/stl_vector.h **** 
 561              		.loc 4 655 0 discriminator 3
 562 010a 488B5424 		movq	16(%rsp), %rdx
 562      10
 563              	.LVL54:
 564              	.LBE639:
 565              	.LBE638:
  96:src/main.cpp  ****         mcList.push_back(b);
  97:src/main.cpp  ****     }
  98:src/main.cpp  **** 
  99:src/main.cpp  ****     for (i = 0; i < mcList.size(); i++) {
 566              		.loc 1 99 0 discriminator 3
 567 010f 488B4424 		movq	24(%rsp), %rax
 567      18
 568 0114 31DB     		xorl	%ebx, %ebx
 569 0116 4829D0   		subq	%rdx, %rax
 570 0119 48C1F803 		sarq	$3, %rax
 571 011d 4885C0   		testq	%rax, %rax
 572 0120 742B     		je	.L36
 573              	.LVL55:
 574              		.p2align 4,,10
 575 0122 660F1F44 		.p2align 3
 575      0000
 576              	.L43:
 100:src/main.cpp  ****         mcList[i]->Do(i);
 577              		.loc 1 100 0 discriminator 2
 578 0128 488B3CDA 		movq	(%rdx,%rbx,8), %rdi
 579 012c 89DE     		movl	%ebx, %esi
 580 012e 4883C301 		addq	$1, %rbx
 581              	.LVL56:
 582 0132 E8000000 		call	_ZN7MyClass2DoEi
 582      00
 583              	.LVL57:
 584              	.LBB641:
 585              	.LBB640:
 655:/usr/include/c++/5/bits/stl_vector.h **** 
 586              		.loc 4 655 0 discriminator 2
 587 0137 488B5424 		movq	16(%rsp), %rdx
 587      10
 588              	.LVL58:
 589              	.LBE640:
 590              	.LBE641:
  99:src/main.cpp  ****         mcList[i]->Do(i);
 591              		.loc 1 99 0 discriminator 2
 592 013c 488B4424 		movq	24(%rsp), %rax
 592      18
 593 0141 4829D0   		subq	%rdx, %rax
 594 0144 48C1F803 		sarq	$3, %rax
 595 0148 4839D8   		cmpq	%rbx, %rax
 596 014b 77DB     		ja	.L43
 597              	.L36:
 101:src/main.cpp  ****     }
 102:src/main.cpp  **** 
 103:src/main.cpp  ****     k = new Kalle;
 598              		.loc 1 103 0
 599 014d BF040000 		movl	$4, %edi
 599      00
 600 0152 E8000000 		call	_Znwm
 600      00
 601              	.LVL59:
 602              	.LBB642:
 603              	.LBB643:
 604              	.LBB644:
 605              	.LBB645:
 606              		.loc 2 104 0
 607 0157 BF010000 		movl	$1, %edi
 607      00
 608              	.LBE645:
 609              	.LBE644:
 610              	.LBE643:
 611              	.LBE642:
 612              	.LBB649:
 613              	.LBB650:
  51:src/main.cpp  ****     }
 614              		.loc 1 51 0
 615 015c C7000100 		movl	$1, (%rax)
 615      0000
 616              	.LVL60:
 617              	.LBE650:
 618              	.LBE649:
 619              	.LBB651:
 620              	.LBB648:
 621              	.LBB647:
 622              	.LBB646:
 623              		.loc 2 104 0
 624 0162 BA010000 		movl	$1, %edx
 624      00
 625 0167 31C0     		xorl	%eax, %eax
 626              	.LVL61:
 627 0169 BE000000 		movl	$.LC6, %esi
 627      00
 628 016e E8000000 		call	__printf_chk
 628      00
 629              	.LVL62:
 630              	.LBE646:
 631              	.LBE647:
 632              	.LBE648:
 633              	.LBE651:
 634              	.LBB652:
 635              	.LBB653:
 636              	.LBB654:
 637              	.LBB655:
 638              	.LBB656:
 639              	.LBB657:
 640              	.LBB658:
 132:/usr/include/c++/5/bits/basic_string.h **** 
 133:/usr/include/c++/5/bits/basic_string.h ****       pointer
 134:/usr/include/c++/5/bits/basic_string.h ****       _M_data() const
 135:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 641              		.loc 7 135 0
 642 0173 488B7C24 		movq	48(%rsp), %rdi
 642      30
 643              	.LVL63:
 644              	.LBE658:
 645              	.LBE657:
 646              	.LBE656:
 136:/usr/include/c++/5/bits/basic_string.h **** 
 137:/usr/include/c++/5/bits/basic_string.h ****       pointer
 138:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data()
 139:/usr/include/c++/5/bits/basic_string.h ****       {
 140:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 142:/usr/include/c++/5/bits/basic_string.h **** #else
 143:/usr/include/c++/5/bits/basic_string.h **** 	return pointer(_M_local_buf);
 144:/usr/include/c++/5/bits/basic_string.h **** #endif
 145:/usr/include/c++/5/bits/basic_string.h ****       }
 146:/usr/include/c++/5/bits/basic_string.h **** 
 147:/usr/include/c++/5/bits/basic_string.h ****       const_pointer
 148:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data() const
 149:/usr/include/c++/5/bits/basic_string.h ****       {
 150:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 151:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 152:/usr/include/c++/5/bits/basic_string.h **** #else
 153:/usr/include/c++/5/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 154:/usr/include/c++/5/bits/basic_string.h **** #endif
 155:/usr/include/c++/5/bits/basic_string.h ****       }
 156:/usr/include/c++/5/bits/basic_string.h **** 
 157:/usr/include/c++/5/bits/basic_string.h ****       void
 158:/usr/include/c++/5/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 159:/usr/include/c++/5/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 160:/usr/include/c++/5/bits/basic_string.h **** 
 161:/usr/include/c++/5/bits/basic_string.h ****       void
 162:/usr/include/c++/5/bits/basic_string.h ****       _M_set_length(size_type __n)
 163:/usr/include/c++/5/bits/basic_string.h ****       {
 164:/usr/include/c++/5/bits/basic_string.h **** 	_M_length(__n);
 165:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 166:/usr/include/c++/5/bits/basic_string.h ****       }
 167:/usr/include/c++/5/bits/basic_string.h **** 
 168:/usr/include/c++/5/bits/basic_string.h ****       bool
 169:/usr/include/c++/5/bits/basic_string.h ****       _M_is_local() const
 170:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 171:/usr/include/c++/5/bits/basic_string.h **** 
 172:/usr/include/c++/5/bits/basic_string.h ****       // Create & Destroy
 173:/usr/include/c++/5/bits/basic_string.h ****       pointer
 174:/usr/include/c++/5/bits/basic_string.h ****       _M_create(size_type&, size_type);
 175:/usr/include/c++/5/bits/basic_string.h **** 
 176:/usr/include/c++/5/bits/basic_string.h ****       void
 177:/usr/include/c++/5/bits/basic_string.h ****       _M_dispose()
 178:/usr/include/c++/5/bits/basic_string.h ****       {
 179:/usr/include/c++/5/bits/basic_string.h **** 	if (!_M_is_local())
 647              		.loc 7 179 0
 648 0178 488D4424 		leaq	64(%rsp), %rax
 648      40
 649 017d 4839C7   		cmpq	%rax, %rdi
 650 0180 7405     		je	.L34
 651              	.LVL64:
 652              	.LBB659:
 653              	.LBB660:
 654              	.LBB661:
 655              	.LBB662:
 110:/usr/include/c++/5/ext/new_allocator.h **** 
 656              		.loc 6 110 0
 657 0182 E8000000 		call	_ZdlPv
 657      00
 658              	.LVL65:
 659              	.L34:
 660              	.LBE662:
 661              	.LBE661:
 662              	.LBE660:
 663              	.LBE659:
 664              	.LBE655:
 665              	.LBE654:
 666              	.LBE653:
 667              	.LBE652:
 668              	.LBB663:
 669              	.LBB664:
 670              	.LBB665:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 671              		.loc 4 161 0
 672 0187 488B7C24 		movq	16(%rsp), %rdi
 672      10
 673              	.LVL66:
 674              	.LBB666:
 675              	.LBB667:
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 676              		.loc 4 177 0
 677 018c 4885FF   		testq	%rdi, %rdi
 678 018f 7405     		je	.L37
 679              	.LVL67:
 680              	.LBB668:
 681              	.LBB669:
 682              	.LBB670:
 110:/usr/include/c++/5/ext/new_allocator.h **** 
 683              		.loc 6 110 0
 684 0191 E8000000 		call	_ZdlPv
 684      00
 685              	.LVL68:
 686              	.L37:
 687              	.LBE670:
 688              	.LBE669:
 689              	.LBE668:
 690              	.LBE667:
 691              	.LBE666:
 692              	.LBE665:
 693              	.LBE664:
 694              	.LBE663:
 104:src/main.cpp  ****     k->Do();
 105:src/main.cpp  **** 
 106:src/main.cpp  ****     return 0;
 107:src/main.cpp  **** }
 695              		.loc 1 107 0
 696 0196 31C0     		xorl	%eax, %eax
 697 0198 488B4C24 		movq	88(%rsp), %rcx
 697      58
 698 019d 6448330C 		xorq	%fs:40, %rcx
 698      25280000 
 698      00
 699 01a6 751C     		jne	.L49
 700 01a8 4883C468 		addq	$104, %rsp
 701              		.cfi_remember_state
 702              		.cfi_def_cfa_offset 24
 703 01ac 5B       		popq	%rbx
 704              		.cfi_def_cfa_offset 16
 705 01ad 5D       		popq	%rbp
 706              		.cfi_def_cfa_offset 8
 707 01ae C3       		ret
 708              	.LVL69:
 709 01af 90       		.p2align 4,,10
 710              		.p2align 3
 711              	.L28:
 712              		.cfi_restore_state
 713              	.LBB671:
 714              	.LBB636:
 923:/usr/include/c++/5/bits/stl_vector.h **** #else
 715              		.loc 4 923 0
 716 01b0 488D7424 		leaq	8(%rsp), %rsi
 716      08
 717              	.LVL70:
 718 01b5 488D7C24 		leaq	16(%rsp), %rdi
 718      10
 719              	.LVL71:
 720 01ba E8000000 		call	_ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_
 720      00
 721              	.LVL72:
 722 01bf E93EFFFF 		jmp	.L30
 722      FF
 723              	.LVL73:
 724              	.L49:
 725              	.LBE636:
 726              	.LBE671:
 727              		.loc 1 107 0
 728 01c4 E8000000 		call	__stack_chk_fail
 728      00
 729              	.LVL74:
 730              		.cfi_endproc
 731              	.LFE1353:
 733              		.section	.text.unlikely
 734              	.LCOLDE7:
 735              		.section	.text.startup
 736              	.LHOTE7:
 737              		.text
 738              	.Letext0:
 739              		.section	.text.unlikely
 740              	.Letext_cold0:
 741              		.file 9 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 742              		.file 10 "/usr/include/x86_64-linux-gnu/bits/types.h"
 743              		.file 11 "/usr/include/stdio.h"
 744              		.file 12 "/usr/include/libio.h"
 745              		.file 13 "/usr/include/wchar.h"
 746              		.file 14 "/usr/include/_G_config.h"
 747              		.file 15 "<built-in>"
 748              		.file 16 "/usr/include/stdlib.h"
 749              		.file 17 "/usr/include/x86_64-linux-gnu/sys/types.h"
 750              		.file 18 "/usr/include/unistd.h"
 751              		.file 19 "/usr/include/c++/5/bits/stringfwd.h"
 752              		.file 20 "/usr/include/c++/5/type_traits"
 753              		.file 21 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h"
 754              		.file 22 "/usr/include/c++/5/bits/exception_ptr.h"
 755              		.file 23 "/usr/include/c++/5/bits/allocator.h"
 756              		.file 24 "/usr/include/c++/5/bits/stl_construct.h"
 757              		.file 25 "/usr/include/c++/5/bits/stl_uninitialized.h"
 758              		.file 26 "/usr/include/c++/5/cwchar"
 759              		.file 27 "/usr/include/c++/5/cstdint"
 760              		.file 28 "/usr/include/c++/5/clocale"
 761              		.file 29 "/usr/include/c++/5/cstdlib"
 762              		.file 30 "/usr/include/c++/5/cstdio"
 763              		.file 31 "/usr/include/c++/5/bits/alloc_traits.h"
 764              		.file 32 "/usr/include/c++/5/initializer_list"
 765              		.file 33 "/usr/include/c++/5/bits/stl_iterator_base_types.h"
 766              		.file 34 "/usr/include/c++/5/bits/ptr_traits.h"
 767              		.file 35 "/usr/include/c++/5/bits/stl_iterator.h"
 768              		.file 36 "/usr/include/c++/5/bits/move.h"
 769              		.file 37 "/usr/include/c++/5/debug/debug.h"
 770              		.file 38 "/usr/include/c++/5/bits/predefined_ops.h"
 771              		.file 39 "/usr/include/c++/5/ext/numeric_traits.h"
 772              		.file 40 "/usr/include/c++/5/ext/alloc_traits.h"
 773              		.file 41 "/usr/include/x86_64-linux-gnu/bits/wchar2.h"
 774              		.file 42 "/usr/include/time.h"
 775              		.file 43 "/usr/include/stdint.h"
 776              		.file 44 "/usr/include/locale.h"
 777              		.file 45 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"
 778              		.file 46 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h"
 779              		.file 47 "/usr/include/x86_64-linux-gnu/bits/stdlib.h"
 780              		.file 48 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
 781              		.file 49 "src/MyClass.h"
 782              		.file 50 "/usr/include/c++/5/new"
 783              		.file 51 "/usr/include/c++/5/bits/stl_pair.h"
 784              		.file 52 "/usr/include/signal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccThkfav.s:17     .text:0000000000000000 _Z6sigHupi
     /tmp/ccThkfav.s:52     .text:0000000000000020 _Z6sigInti
     /tmp/ccThkfav.s:96     .text._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_:0000000000000000 _ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_
     /tmp/ccThkfav.s:96     .text._ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_:0000000000000000 _ZNSt6vectorIP7MyClassSaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_
     /tmp/ccThkfav.s:392    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__printf_chk
exit
_Znwm
_ZdlPv
memmove
_ZN7MyClassC1Ev
signal
_ZN7MyClass2DoEi
_ZN7MyClassC1Ei
__stack_chk_fail
